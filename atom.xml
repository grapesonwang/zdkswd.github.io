<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZDK&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/zdkswd/"/>
  <updated>2018-05-15T13:42:02.000Z</updated>
  <id>https://github.com/zdkswd/</id>
  
  <author>
    <name>ZDK</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Linux内核设计与实现]进程调度</title>
    <link href="https://github.com/zdkswd/2018/05/15/%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/"/>
    <id>https://github.com/zdkswd/2018/05/15/进程调度/</id>
    <published>2018-05-15T13:39:12.000Z</published>
    <updated>2018-05-15T13:42:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多任务"><a href="#多任务" class="headerlink" title="多任务"></a>多任务</h2><p>现代Linux系统也许有100个进程在内存，但是只有一个处于可运行状态。<br>Linux是抢占式多任务模式。</p><h2 id="Linux的进程调度"><a href="#Linux的进程调度" class="headerlink" title="Linux的进程调度"></a>Linux的进程调度</h2><p>Linux2.5内核开始采用O（1）调度程序，对大服务器工作负载很理想但对于交互性桌面系统表现不佳。<br>2.6.23内核后使用RSDL增加了交互性，此时被称为CFS（完全公平调度算法）</p><h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><h3 id="I-O消耗型和处理器消耗型的进程"><a href="#I-O消耗型和处理器消耗型的进程" class="headerlink" title="I/O消耗型和处理器消耗型的进程"></a>I/O消耗型和处理器消耗型的进程</h3><p>GUI属于I/O消耗型，多数时间都在等待键鼠交互操作。<br>应当降低处理器消耗型的调度频率，以延长其运行时间。<br>Linux更倾向于IO消耗型进程，也并未忽略处理器消耗型进程。</p><h3 id="进程优先级"><a href="#进程优先级" class="headerlink" title="进程优先级"></a>进程优先级</h3><p>Linux采用了两种不同范围的优先级范围。<br>1：使用nice值，范围【-20，19】，默认0，越大优先级越低。Linux nice代表时间片比例，mac os nice代表时间片的绝对值。<br>2：实时优先级，其值可配。范围【0，99】，越高优先级越大。任何实时进程优先级都高于普通进程。</p><h3 id="时间片"><a href="#时间片" class="headerlink" title="时间片"></a>时间片</h3><p>Linux的CFS调度器并没有直接分配时间片到进程，将处理器的使用比划分给了进程。进程所获处理器的时间和负载密切相关。受nice值得影响。<br>Linux的CFS调度器抢占时机取决于进程的处理器使用比，若大于当前进程则抢占。</p><h3 id="调度策略的活动"><a href="#调度策略的活动" class="headerlink" title="调度策略的活动"></a>调度策略的活动</h3><p>对于一个文字编辑程序和一个视频处理程序，一般操作系统会分配文字编辑器更高的优先级和更多的时间片。Linux则是nice值相同，即平分50%时间，但是当文字编辑程序要使用处理器时，CFS发现其时间没到50%，会抢占视频处理程序执行。</p><h2 id="Linux调度算法"><a href="#Linux调度算法" class="headerlink" title="Linux调度算法"></a>Linux调度算法</h2><h3 id="调度器类"><a href="#调度器类" class="headerlink" title="调度器类"></a>调度器类</h3><p>Linux调度器是模块方式，可以针对不同类型的进程选择合适的调度算法。<br>完全公平调度（CFS）是针对普通进程的调度类。</p><h3 id="Unix系统的进程调度"><a href="#Unix系统的进程调度" class="headerlink" title="Unix系统的进程调度"></a>Unix系统的进程调度</h3><p>CFS完全摒弃时间片而是分配进程一个处理器的使用比重，这样CFS确保了进程调度有恒定的公平性，将切换频率置于不断变动中。</p><h3 id="公平调度"><a href="#公平调度" class="headerlink" title="公平调度"></a>公平调度</h3><p>CFS的最小粒度（最小时间片长度）为1ms，时间片分配时间根据目标延迟以及nice值决定的比例计算而得。所以说其实如果进程无限大的话，改法并不公平。但是能保证正常情况下是公平的。</p><h2 id="Linux调度的实现"><a href="#Linux调度的实现" class="headerlink" title="Linux调度的实现"></a>Linux调度的实现</h2><h3 id="时间记账"><a href="#时间记账" class="headerlink" title="时间记账"></a>时间记账</h3><p> 所有的调度器都必须对进程运行时间做记账。</p><ol><li><strong>调度器实体结构</strong>,CFS不再有时间片的概念，但是它也必须维护每个进程运行时间记账，为了确保每个进程只在公平分配给它的处理器时间运行。CFS使用调度器实体结构struct sched_entity作为名为se的成员变量，嵌入进程描述符struct task_struct内。  </li><li><strong>虚拟实时</strong>，struct sched_entity结构中的vruntime变量存放进程的虚拟运行时间，虚拟时间是以ns为单位的，与定时器节拍不再相关。vruntime可以准确地测量给定进程的运行时间，而且可知道谁应该是下一个被运行的进程。</li></ol><h3 id="进程选择"><a href="#进程选择" class="headerlink" title="进程选择"></a>进程选择</h3><p>当CFS需要选择下一个运行进程时，它会挑一个具有最小vruntime的进程。<br>CFS使用红黑树来组织可运行进程队列，并利用其迅速找到最小的vruntime值的进程。红黑树是一种以树节点形式存储的数据，这些数据都对应一个键值，可通过键值快速检索节点上的数据。</p><ol><li><strong>挑选下一个任务</strong>，CFS调度器选取待运行的下一个进程，是所有进程中vruntime最小的那一个，对应的便是树最左侧的叶子节点。   </li><li><strong>向树中加入进程</strong>，CFS如何将进程加入rbtree中，以及如何缓存最左叶子节点。这一切发生在进程变为可运行状态（被唤醒）或是通过fork()调用第一次创建进程时。enqueue_entity()函数实现了这一目的。改函数更新运行时间和其他一些统计数据，然后调用_enqueue_entity()进行繁重的插入操作，把数据项真正插入到红黑树中。</li><li><strong>从树中删除进程</strong>, 删除动作发生在进程堵塞或者终止时。<h3 id="调度器入口"><a href="#调度器入口" class="headerlink" title="调度器入口"></a>调度器入口</h3>进程调度的主要入口点是函数schedule()，它会找到一个最高优先级的调度类，其需要有自己的可运行队列。<h3 id="睡眠和唤醒"><a href="#睡眠和唤醒" class="headerlink" title="睡眠和唤醒"></a>睡眠和唤醒</h3>休眠（被阻塞）进程把自己标记成休眠状态，从可执行红黑树中移出，放入等待队列，然后调用schedule()选择和执行一个其他进程。唤醒的过程刚好相反：进程被设置为可执行状态，然后再从等待队列中移到可执行红黑树中。</li><li><strong>等待队列</strong>， 等待队列是由等待某些事件发生的进程组成的简单链表。</li><li><strong>唤醒</strong>， 唤醒指定等待队列上的所有进程。<h2 id="抢占和上下文切换"><a href="#抢占和上下文切换" class="headerlink" title="抢占和上下文切换"></a>抢占和上下文切换</h2>上下文切换，就是从一个可执行进程切换到另一个可执行的进程。由函数context_switch()负责，每当新的进程被选出来准备投入运行时，schedule()就会调用该函数。内核提供了一个need_resched标志表明是否需要重新执行一次调度，内核也就知道什么时候调用schedule()。当某个进程应该被抢占或优先级高的进程进入可执行状态时或中断返回或系统调用返回用户空间，会设置标志位。<h3 id="用户抢占"><a href="#用户抢占" class="headerlink" title="用户抢占"></a>用户抢占</h3>内核即将返回用户空间的时候，如果need_resched标志被设置，会导致schedule()被调用，此时就会发生用户抢占。即用户抢占发生在</li></ol><ul><li>从系统调用返回用户空间时。     </li><li>从中断处理程序返回用户空间时。  </li></ul><h3 id="内核抢占"><a href="#内核抢占" class="headerlink" title="内核抢占"></a>内核抢占</h3><p>Linux完整地支持内核抢占，只要重新调度是安全的，内核就可以在任何时候抢占正在执行的内核任务。安全即没有持有锁，即preempy_count=0且need_resched被设置，中断返回内核空间时，就可调度。同样若内核阻塞或显式调用schedule()也会显式抢占。</p><h2 id="实时调度策略"><a href="#实时调度策略" class="headerlink" title="实时调度策略"></a>实时调度策略</h2><p>Linux提供了两种实时调度策略：SCHED_FIFO和SCHED_RR，普通的非实时的调度策略是SCHED_NORMAL.这些策略被一个特殊的实时调度器管理。</p><ol><li><strong>SCHED_FIFO</strong>, 不基于时间片，可以一直执行下去，其比任何SCHED_NORMAL级的进程都先得到调度。更高优先级的SCHED_FIFO或SCHED_RR才能抢占。优先级一样的就轮流执行。</li><li><strong>SCHED_RR</strong>,带有时间片的SCHED_FIFO，耗尽时间片时，只能调度同一优先级的进程。<br>【 <strong>总结</strong>】：对于SCHED_FIFO进程，高优先级总是立即抢占低优先级进程，但低优先级决不能抢占SCHED__RR任务，即使它的时间片耗尽。<br>Linux提供的是软实时工作方式，SCHED_RR与SCHED_FIFO优先级范围【0，99】，而SCHED_NORMAL使用nice值。<h2 id="与调度相关的系统调度"><a href="#与调度相关的系统调度" class="headerlink" title="与调度相关的系统调度"></a>与调度相关的系统调度</h2>Linux提供了一个系统调用族，用于管理与调度程序的相关<strong>参数</strong>。这些系统调用可以用来操作和处理进程优先级、调度策略及处理器绑定，同时还提供了显式地将处理器交给其他进程的机制。<h3 id="与调度策略和优先级相关的系统调用"><a href="#与调度策略和优先级相关的系统调用" class="headerlink" title="与调度策略和优先级相关的系统调用"></a>与调度策略和优先级相关的系统调用</h3>sched_setscheduler()和sched_getscheduler()用于设置和获取进程的调度策略和实时优先级。sched_setparam()和sched_getparam()用于设置和获取进程的实时优先级。<h3 id="与处理器绑定有关的系统调用"><a href="#与处理器绑定有关的系统调用" class="headerlink" title="与处理器绑定有关的系统调用"></a>与处理器绑定有关的系统调用</h3>Linux调度程序提供强制的处理器绑定机制。<h3 id="放弃处理器时间"><a href="#放弃处理器时间" class="headerlink" title="放弃处理器时间"></a>放弃处理器时间</h3>Linux通过sched_yield()系统调用，提供了一种让进程显式地将处理器时间让给其他等待执行进程的机制。 </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;多任务&quot;&gt;&lt;a href=&quot;#多任务&quot; class=&quot;headerlink&quot; title=&quot;多任务&quot;&gt;&lt;/a&gt;多任务&lt;/h2&gt;&lt;p&gt;现代Linux系统也许有100个进程在内存，但是只有一个处于可运行状态。&lt;br&gt;Linux是抢占式多任务模式。&lt;/p&gt;
&lt;h2 id
      
    
    </summary>
    
      <category term="读书笔记" scheme="https://github.com/zdkswd/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://github.com/zdkswd/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>初识makefile_make_cmake</title>
    <link href="https://github.com/zdkswd/2018/04/29/cmake/"/>
    <id>https://github.com/zdkswd/2018/04/29/cmake/</id>
    <published>2018-04-29T14:11:20.000Z</published>
    <updated>2018-04-29T14:17:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识makefile-make-cmake"><a href="#初识makefile-make-cmake" class="headerlink" title="初识makefile,make,cmake"></a>初识makefile,make,cmake</h1><h2 id="什么是makefile"><a href="#什么是makefile" class="headerlink" title="什么是makefile"></a>什么是makefile</h2><p>make命令执行时，需要一个 Makefile 文件，以告诉make命令需要怎么样的去<strong>编译</strong>和<strong>链接</strong>程序。<br>makefile关系到了整个工程的编译规则。makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为makefile就像一个Shell脚本一样，其中也可以执行操作系统的命令。只要我们的Makefile写得够好，所有的这一切，我们只用一个make命令就可以完成，make命令会自动智能地根据当前的文件修改的情况来确定哪些文件需要重编译，从而自己编译所需要的文件和链接目标程序。</p><h2 id="什么是make"><a href="#什么是make" class="headerlink" title="什么是make"></a>什么是make</h2><p>makefile带来的好处就是——“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大的提高了软件开发的效率。</p><p>make是一个命令工具，是一个解释makefile中指令的命令工具，一般来说，大多数的IDE都有这个命令，比如：Delphi的make，Visual C++的nmake，Linux下GNU的make。可见，makefile都成为了一种在工程方面的编译方法（包括链接）。</p><h2 id="关于程序的编译和链接"><a href="#关于程序的编译和链接" class="headerlink" title="关于程序的编译和链接"></a>关于程序的编译和链接</h2><p>在大多数时候，由于源文件太多，编译生成的中间目标文件太多，而在链接时需要明显地指出中间目标文件名，这对于编译很不方便，所以，我们要给中间目标文件打个包，在Windows下这种包叫“库文件”（Library File)，也就是 .lib 文件，在UNIX下，是Archive File，也就是 .a 文件。Linux中的.so。<br>一个lib文件是obj文件的集合。<br>源文件首先会生成中间目标文件，再由中间目标文件生成执行文件。在编译时，编译器只检测程序语法，和函数、变量是否被声明。如果函数未被声明，编译器会给出一个警告，但可以生成Object File。而在链接程序时，链接器会在所有的Object File中找寻函数的实现，如果找不到，那到就会报链接错误码</p><h2 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h2><p><strong>usr</strong>文件夹称为是Unix System Resource，即Unix系统资源的缩写。  </p><p><strong>bin文件夹</strong>是一个二进制程序文件夹<br>1.bin是binary的缩写，代表的意思是二进制，二进制数据是用0和1两个数码来表示的数。<br>2.bin这个文件夹里存放的是二进制可执行的文件，比如exe，msi，com等的都是二进制文件，双击就能运行。  </p><p>GUN下面绝大部分应用的编译系统都是用<strong>automake</strong>。<br>于是乎，你看到的很多很多应用都安装在了/usr/local/目录下<br>然后通常/usr/bin下面的都是系统预装的可执行程序，会随着系统升级而改变<br>/usr/local/bin目录是给用户放置自己的可执行程序的地方，推荐放在这里，不会被系统升级而覆盖同名文件<br>安装好的lib文件存放在“/usr/local/lib”文件夹，h文件存放在“/usr/local/include”（Unix）</p><h2 id="什么是cmake"><a href="#什么是cmake" class="headerlink" title="什么是cmake"></a>什么是cmake</h2><p>CMake是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装(编译过程)。他能够输出各种各样的makefile或者project文件，能测试编译器所支持的C++特性,类似UNIX下的automake。只是 CMake 的组态档取名为 CMakeLists.txt。<br>cmake是跨平台项目管理工具，它用更抽象的语法来组织项目。在windows下它会支持生成visual studio的工程，在linux下它会生成Makefile，甚至它还能生成eclipse工程文件。也就是说，从同一个抽象规则出发，它为各个编译器定制工程文件。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/media/15249996372857/15250008307496.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="dll"><a href="#dll" class="headerlink" title="dll"></a>dll</h2><p>dll存在于windows中</p><h2 id="openCV安装过程"><a href="#openCV安装过程" class="headerlink" title="openCV安装过程"></a>openCV安装过程</h2><blockquote><p>mkdir release<br>cd release<br>cmake -D CMAKE_BUILD_TYPE=RELEASE -D 换行CMAKE_INSTALL_PREFIX=usr/local/opencv3.1.0  -G “Unix Makefiles” ..<br>make<br>sudo make install</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;初识makefile-make-cmake&quot;&gt;&lt;a href=&quot;#初识makefile-make-cmake&quot; class=&quot;headerlink&quot; title=&quot;初识makefile,make,cmake&quot;&gt;&lt;/a&gt;初识makefile,make,cmake&lt;/
      
    
    </summary>
    
      <category term="计算机科学" scheme="https://github.com/zdkswd/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="软件构筑" scheme="https://github.com/zdkswd/tags/%E8%BD%AF%E4%BB%B6%E6%9E%84%E7%AD%91/"/>
    
  </entry>
  
  <entry>
    <title>李宏毅2017听课笔记1-Where does the error come from?</title>
    <link href="https://github.com/zdkswd/2018/04/25/%E6%9D%8E%E5%AE%8F%E6%AF%85error/"/>
    <id>https://github.com/zdkswd/2018/04/25/李宏毅error/</id>
    <published>2018-04-25T14:48:13.000Z</published>
    <updated>2018-04-25T14:53:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="李宏毅2017听课笔记1-Where-does-the-error-come-from"><a href="#李宏毅2017听课笔记1-Where-does-the-error-come-from" class="headerlink" title="李宏毅2017听课笔记1-Where does the error come from?"></a>李宏毅2017听课笔记1-Where does the error come from?</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/media/15245707424828/15245752316344.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/media/15245707424828/15245752454185.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/media/15245707424828/15245752497587.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/media/15245707424828/15245752535450.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>这么多线是多次试验，每次试验拟合出一条红线</strong> </p><p><img src="/img/media/15245707424828/15245752575393.jpg" alt=""><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/media/15245707424828/15245752784321.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><strong>在这里直观的解释了为什么简单的模型偏差更大，因为最终是在函数集中选取最佳函数，因为函数简单的话，一开始划定的范围就较小。</strong></p><p><img src="/img/media/15245707424828/15245752825260.jpg" alt=""><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/media/15245707424828/15245753194288.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/media/15245707424828/15245753375273.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>正则化会伤害bias，因为只选择更平滑的曲线，相当于划了范围。（其实是让模型更简单了）</strong></p><p><img src="/img/media/15245707424828/15245772661756.jpg" alt=""></p><p><img src="/img/media/15245707424828/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-24%20%E4%B8%8B%E5%8D%889.47.53.png" alt="屏幕快照 2018-04-24 下午9.47.53"><br>分为训练集，验证集，测试集</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;李宏毅2017听课笔记1-Where-does-the-error-come-from&quot;&gt;&lt;a href=&quot;#李宏毅2017听课笔记1-Where-does-the-error-come-from&quot; class=&quot;headerlink&quot; title=&quot;李宏毅201
      
    
    </summary>
    
      <category term="听课笔记" scheme="https://github.com/zdkswd/categories/%E5%90%AC%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="机器学习" scheme="https://github.com/zdkswd/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>李宏毅2017听课笔记0</title>
    <link href="https://github.com/zdkswd/2018/04/25/%E6%9D%8E%E5%AE%8F%E6%AF%852017%E5%90%AC%E8%AF%BE%E7%AC%94%E8%AE%B00/"/>
    <id>https://github.com/zdkswd/2018/04/25/李宏毅2017听课笔记0/</id>
    <published>2018-04-25T01:26:25.000Z</published>
    <updated>2018-04-26T14:11:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="李宏毅2017听课笔记0"><a href="#李宏毅2017听课笔记0" class="headerlink" title="李宏毅2017听课笔记0"></a>李宏毅2017听课笔记0</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前听了吴恩达2014大部分的课以及吴恩达最近在网易云上的CNN课程。<br>听闻李宏毅的课程不错，主要比较系统全面，来听一哈喽。<br><a href="https://blog.csdn.net/soulmeetliang/article/details/77461607" target="_blank" rel="noopener">不错的博客</a></p><h2 id="0-1Introduction"><a href="#0-1Introduction" class="headerlink" title="0-1Introduction"></a>0-1Introduction</h2><p><strong>找出function</strong>  </p><ul><li>准备一个function set  (model)</li><li>机器决定function们的好坏</li><li>找出最好的function</li></ul><p><strong>Deep Learning</strong>：<br>分类，非线性</p><p><strong>Learning Map</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/media/15245638704627/15245780453416.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p><strong>Reinforcement Learning</strong><br>在实际运用中，以上方法并不能解决全部问题，常常会遇到Beyond Classification的情况，比如语音识别，人脸识别，语言翻译等，那么就要通过增强学习来解决问题。<br>增强学习的一个非常知名的应用就是 google 阿法狗。</p><p><strong>Reinforcement Learning VS Supervised</strong><br>Supervised 就像给了机器一个点读机，他听到一句话时可以看到其含义，每一句话都有标签，就像有一个手把手教他的老师。<br>而Reinforcement Learning 就像跟女朋友对话，反复讲来回讲很多句话，直到女朋友觉得你无言以对愤然离去，机器唯一可以知道的就是他做的好还是不好，除此之外没有任何information。而这更像人类现实生活中的学习过程，必须自己像哪里做得好做得不够好，怎么修正。      </p><p><strong>Learning Map:</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/media/15245638704627/15245780740118.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p><strong>scenario</strong>:学习情景，不受自己控制。意思是你现在有什么类型的 training data。</p><table><thead><tr><th>machine learning</th><th>scenario</th></tr></thead><tbody><tr><td>Supervised Learning</td><td>有标签data</td></tr><tr><td>Semi-supervised Learning</td><td>部分有标签data</td></tr><tr><td>Unsupervised Learning</td><td>无标签data</td></tr><tr><td>Transfer Learning</td><td>一堆不相干data</td></tr><tr><td>Reinforcement Learning</td><td>只有来自外界的评价</td></tr></tbody></table><p><strong>task</strong>，意思是现在function的output是什么，只体现在supervised中，但其实可以插在以上五种Learning的每一种内。</p><table><thead><tr><th>machine learning</th><th>task(output)</th></tr></thead><tbody><tr><td>Regression</td><td>scalar</td></tr><tr><td>Classification</td><td>class1、class2…之一</td></tr><tr><td>Structured Learning</td><td>有结构的内容</td></tr></tbody></table><p><strong>Method</strong>方法模型，比如在Classification中有Linear模型 or Non-linear模型，我们可以将绿色部分插入任何红色部分中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;李宏毅2017听课笔记0&quot;&gt;&lt;a href=&quot;#李宏毅2017听课笔记0&quot; class=&quot;headerlink&quot; title=&quot;李宏毅2017听课笔记0&quot;&gt;&lt;/a&gt;李宏毅2017听课笔记0&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;
      
    
    </summary>
    
      <category term="听课笔记" scheme="https://github.com/zdkswd/categories/%E5%90%AC%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="机器学习" scheme="https://github.com/zdkswd/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>[Linux内核设计与实现]进程管理</title>
    <link href="https://github.com/zdkswd/2018/04/16/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>https://github.com/zdkswd/2018/04/16/进程管理/</id>
    <published>2018-04-16T10:50:51.000Z</published>
    <updated>2018-04-28T01:52:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>内核调度的对象是线程，而不是进程。Linux系统的线程实现非常特别：它对线程和进程并不特别区分。<br>进程提供两种虚拟机制，虚拟处理器与虚拟内存。一个是进程独享处理器的假象一个是独享内存资源的假象。线程之间共享虚拟内存，各自有虚拟处理器。<br>父进程调用fork()复制现有进程创建一个全新的进程子进程。</p><p>每个线程都有一个独立的程序计数器、进程栈和一组进程寄存器。内核调度的对象是线程，而不是进程。Linux系统的线程实现非常特别：它对线程和进程并不特别区分。<br>进程提供两种虚拟机制，虚拟处理器与虚拟内存。一个是进程独享处理器的假象一个是独享内存资源的假象。线程之间共享虚拟内存，各自有虚拟处理器。<br>进程的另一个名字是<strong>task</strong>，Linux内核通常把进程也叫做任务。</p><h2 id="进程描述符及任务结构"><a href="#进程描述符及任务结构" class="headerlink" title="进程描述符及任务结构"></a>进程描述符及任务结构</h2><p>内核把进程的列表存放在任务列表（task list）的双向循环列表中。链表的每一项都是类型为<strong>task_struct</strong>称为<strong>进程描述符</strong>的结构中，该结构相对较大，包含的数据能够完整的描述一个正在运行的程序：打开的文件，进程地址空间，挂起信号，进程状态及其他。</p><h3 id="分配进程描述符"><a href="#分配进程描述符" class="headerlink" title="分配进程描述符"></a>分配进程描述符</h3><p>Linux通过slab分配器分配task_struct结构,这样能够对象复用和缓存着色。<br>使用slab动态生成task_struct需要用到结构<strong>thread_info</strong>,其task域有指向实际进程描述符的指针。每个任务的thread_info在它的内核栈的尾端分配。</p><h3 id="进程描述符的存放"><a href="#进程描述符的存放" class="headerlink" title="进程描述符的存放"></a>进程描述符的存放</h3><p>内核通过唯一标识符PID（process indentification value）来标识每个进程，PID存放在进程描述符。为了兼容性设置其为short int型，故其最大值为32768.但是对于大型服务器需要更大值。可以不考虑兼容性修改/proc/sys/kernel/pid_max提高上限。 </p><p>内核访问任务需要获取指向task_struct的指针，故通过宏找到当前正在运行的进程描述符的速度就尤为重要。硬件的结构体系不同，宏的实现不同。例如有的体系结构有专用寄存器用于加快访问task_struct的速度，x86结构寄存器并不富余，就只能通过计算偏移间接查找task_struct。  </p><h3 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h3><p>task_struct的state域描述当前状态，必为五中之一   </p><ul><li>TASK_RUNNING(运行)在运行或在运行队列等待  </li><li>TASK_INTERRUPIBLE(可中断)被阻塞</li><li>TASK_UNINTERRUPTIBLE（不可中断）接到信号也不会唤醒</li><li>_TASK_TRACED被其他进程跟踪</li><li>_TASK_STOPPED停止执行</li></ul><h3 id="设置当前的进程状态"><a href="#设置当前的进程状态" class="headerlink" title="设置当前的进程状态"></a>设置当前的进程状态</h3><p>调整某个进程状态</p><blockquote><p>set_task_state(task,state);</p></blockquote><h3 id="进程上下文"><a href="#进程上下文" class="headerlink" title="进程上下文"></a>进程上下文</h3><p>可执行代码是进程的重要组成部分。这些代码从一个可执行文件载入到进程的地址空间执行，一般在用户空间执行，执行系统调用或触发异常陷入内核空间。对内核的访问必须经过明确定义的接口。</p><h3 id="进程家族树"><a href="#进程家族树" class="headerlink" title="进程家族树"></a>进程家族树</h3><p>Linux和Unix一样所有的进程都是PID为1的init进程的后代。内核在系统启动的最后阶段启动init进程读取系统初始化脚本（initscript）并执行其他相关程序最终完成系统启动整个过程。init进程的进程描述符是作为init_task静态分配的。<br>对于当前task_struct，可以通过task_struct类型parent指针访问其父进程（必有一个），还包含一个children的子进程链表。 </p><h2 id="进程创建"><a href="#进程创建" class="headerlink" title="进程创建"></a>进程创建</h2><p>许多其他操作系统：首先在新的地址空间创建进程，读入可执行文件，最后开始执行。<br>Unix：首先通过fork（）拷贝当前进程创建一个子进程，父子进程区别仅限于PID，PPID（子进程将其设为父进程PID值）和某些资源统计量。exec（）负责读取可执行文件并将其载入地址空间运行。</p><h3 id="写时拷贝"><a href="#写时拷贝" class="headerlink" title="写时拷贝"></a>写时拷贝</h3><p>Linux的fork（）采用写时拷贝，只有子进程在父进程进行写入时再进行拷贝，其他的时候是只读共享。所以fork（）的实际开销就是复制父进程页表以及创建PID。</p><h3 id="fork（）"><a href="#fork（）" class="headerlink" title="fork（）"></a>fork（）</h3><p>Linux通过clone（）系统调用实现fork（）<br>fork（）-调用-&gt;clone()-调用-&gt;do_fork()（完成创建的大部分工作）-调用-&gt;copy_process()<br>copy_process工作:</p><ol><li>调用dup_task_strucr()为新进程创建一个内核栈、thread_info和task_struct，此时，父子进程描述符完全一样。</li><li>检查并确保新创建这个进程后进程数目没有超出资源限制。</li><li>子进程着手于区别父进程。task_struct的许多成员被清零或设为初始值。</li><li>子进程的状态被设置为TASK_UNINTERRUPTIBLE，以保证它不会投入运行。</li><li>copy_process()调用copy_flags()以更新task_struct的flags成员。表明进程是否拥有超级用户权限的PF_SUPERRIV标志被清0，表示进程还没有调用exec()函数的PF_FORKNOEXEC标志被设置。</li><li>调用alloc_pid()为新进程分配一个分配一个有效的PID。</li><li>根据传递给clone()的参数标志，copy_process()拷贝或共享打开的文件、文件系统信息、信息处理函数、进程地址空间和命名空间等。一般，这些资源会所有线程共享，否则资源对每个进程是不同的，因此拷贝到这里。</li><li>最后，copy_process做扫尾工作并返回一个指向子进程的指针。 </li></ol><p>如果copy_process()成功返回do_fork()，新创进程被唤醒且内核有意让其首先执行。因为一般子进程都会马上调用exec()函数，可以避免父进程首先执行可能的写入造成的额外开销。</p><h3 id="vfork（）"><a href="#vfork（）" class="headerlink" title="vfork（）"></a>vfork（）</h3><p>除了不拷贝父进程的页表项以外，vfork()和fork()功能相同。基本没啥用。</p><h2 id="线程在Linux中的实现"><a href="#线程在Linux中的实现" class="headerlink" title="线程在Linux中的实现"></a>线程在Linux中的实现</h2><p>Linux中，线程具有task_struct,它看起来就是普通进程，只是和其他一些进程共享某些资源，如地址空间。对Linux来说，线程只是进程间共享资源的手段。</p><h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><p>线程创建于进程类似，只是在调用clone时需要传递一些参数标明需要共享的资源。创建Linux进程所花时间和其他操作系统创建线程要少。</p><h3 id="内核线程"><a href="#内核线程" class="headerlink" title="内核线程"></a>内核线程</h3><p>独立运行在内核空间的标准进程，和普通进程区别在于没有独立地址空间。只在内核空间运行，和普通进程一样，可以被调度，也可以被强占。<br>新的任务是由kthread内核进程通过clone()系统调用而创建的。<br>内核线程启动后就一直运行到调用do_exit（）退出或其他部分调用kthread_stop()退出。</p><h2 id="进程终结"><a href="#进程终结" class="headerlink" title="进程终结"></a>进程终结</h2><p>终结时，释放资源并告诉父进程。<br>可以调用exit()主动终结,也可以异常被动终结,但大部分靠do_exit()来完成<br>do_exit():</p><ol><li>将task_struct标志设为PF_EXITING</li><li>调用del_time_sync()删除任一内核定时器。根据返回的结果，它确保没有定时器在排队也没有定时器处理程序在运行。</li><li>如果BSD的记账功能是开启的，do_exit()调acct_update_integrals()来输入记账信息。</li><li>调用exit_mm()函数释放进程占用的mm_struct，如果没有别的进程使用它们（也就是说，这个进程空间没有被共享），就彻底释放它们。</li><li>调用sem_exit()函数，如果进程排队等候IPC信号，它则离开队列。</li><li>调用exit_files()和exit_fs()，以分别递减文件描述符、文件系统数据的引用计数。如果其中某个引用计数的数值降为0，那么久代表没有进程在使用相应的资源可以释放。</li><li>接着把存放在task_struct和exit_code成员中的任务退出代码置为由exit（）提供的退出代码，或者去完成任何其他由内核机制规定的退出动作，退出代码存放在这里供父进程随时检索。</li><li>调用exit_notufy()向父进程发送信号，给子进程重新找养父，养父为线程组中的其他线程或为init进程，并把进程状态（存放在task_struct中的exit_state中）设成EXIT_ZOMBIE。</li><li>do_exit()调用schedule（）切换到新的进程。因为处于EXIT_ZOMBIE状态的进程不会再被调度，所以这是进程执行的最后一段代码。do_exit()永不返回。</li></ol><p>至此进程仅剩的内存就是内核栈，Thread_info 和task_struct结构。此时进程存在的唯一目的数向它的父进程提供信息。父进程检索到信息后，或者通知内核那是无关信息后，内存释放。</p><h3 id="删除进程描述符"><a href="#删除进程描述符" class="headerlink" title="删除进程描述符"></a>删除进程描述符</h3><p>进程终结时的清理工作和进程描述符的删除被分开进行，这样做可以让系统有办法在子进程终结后仍能获得它的信息。过程如上段。</p><h3 id="孤儿进程造成的进退维谷"><a href="#孤儿进程造成的进退维谷" class="headerlink" title="孤儿进程造成的进退维谷"></a>孤儿进程造成的进退维谷</h3><p>如果父进程在子进程之前退出，必须有机制来保证子进程能够找到一个新的父亲。解决方法是给子进程在当前线程组内找一个线程做父亲，如果不行，就让init做父进程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h2&gt;&lt;p&gt;内核调度的对象是线程，而不是进程。Linux系统的线程实现非常特别：它对线程和进程并不特别区分。&lt;br&gt;进程提供两种虚拟机制，虚拟处理器与虚
      
    
    </summary>
    
      <category term="读书笔记" scheme="https://github.com/zdkswd/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="纸质书笔记" scheme="https://github.com/zdkswd/tags/%E7%BA%B8%E8%B4%A8%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>[LINUX内核设计与实现]第二章</title>
    <link href="https://github.com/zdkswd/2018/04/13/%E4%BB%8E%E5%86%85%E6%A0%B8%E5%87%BA%E5%8F%91/"/>
    <id>https://github.com/zdkswd/2018/04/13/从内核出发/</id>
    <published>2018-04-13T12:36:32.000Z</published>
    <updated>2018-04-14T07:49:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从内核出发"><a href="#从内核出发" class="headerlink" title="从内核出发"></a>从内核出发</h1><h2 id="内核源码树"><a href="#内核源码树" class="headerlink" title="内核源码树"></a>内核源码树</h2><p>内核源码树根目录描述    </p><table><thead><tr><th>目录</th><th>描述</th></tr></thead><tbody><tr><td>arch</td><td>特定体系结构的源码</td></tr><tr><td>block</td><td>块设备IO层</td></tr><tr><td>crypto</td><td>加密API</td></tr><tr><td>Documentation</td><td>内核源码文档</td></tr><tr><td>drivers</td><td>设备驱动程序</td></tr><tr><td>firmware</td><td>使用某些驱动程序而需要的设备固件</td></tr><tr><td>fs</td><td>VFS和各种文件系统</td></tr><tr><td>include</td><td>内核头文件</td></tr><tr><td>init</td><td>内核引导和初始化</td></tr><tr><td>ipc</td><td>进程间通信代码</td></tr><tr><td>kernel</td><td>像调度程序这样的核心子系统</td></tr><tr><td>lib</td><td>通用内核函数</td></tr><tr><td>mm</td><td>内存管理子系统和VM</td></tr><tr><td>net</td><td>网络子系统</td></tr><tr><td>samples</td><td>实例，示范代码</td></tr><tr><td>scripts</td><td>编译内核所用的脚本</td></tr><tr><td>security</td><td>Linux安全模块</td></tr><tr><td>sound</td><td>语音子系统</td></tr><tr><td>usr</td><td>早期用户空间代码（所谓的initramfs）</td></tr><tr><td>tools</td><td>在Linux开发中有用的工具</td></tr><tr><td>virt</td><td>虚拟化基础结构</td></tr></tbody></table><p>在源码根目录还有很多文件值得提及。COPYING文件是内核许可证（GNU GPL v2）。CREDITS是开发了很多内核代码的开发者列表。MAINTAINERS是维护者列表，负责维护内核子系统和驱动程序。Makefile是基本内核的Makefile。</p><h2 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h2><h3 id="配置内核"><a href="#配置内核" class="headerlink" title="配置内核"></a>配置内核</h3><p>在编译前可以把自己的需要的特定功能和驱动程序编译进内核，首先必须先配置，<br>其以CONFIG_FEATURE形式表示。配置选项要么是二选一（yes/no）要么是三选一（yes/no/module）module表示这部分功能的实现代码是以模块的形式生成。驱动程序一般都是三选一选项。<br>配置选项也可以是字符串或整数。这些选项并不控制编译过程，而只是指定内核源码可以访问的值，一般以预处理宏的形式表示。</p><blockquote><p>$ make config  </p></blockquote><p>该工具会遍历所有配置项，但耗时过长 </p><blockquote><p>$make menuconfig<br>$make gconfig  </p></blockquote><p>可破之。<br>以上三种工具将所有配置分门别类的放置。</p><blockquote><p>$make defconfig </p></blockquote><p>创建默认配置。<br>这些配置项被存放在根目录的.config文件中。在进行修改后，你应当验证和更新配置：</p><blockquote><p>$ make oldconfig</p></blockquote><p>配置选项CONFIG_IKCONFIG_PROC把完整的压缩内核配置文件放在/proc/config.gz下，在编译新内核时可以克隆配置。</p><blockquote><p>$zcat /proc/config.gz &gt; .config<br>$make oldconfig </p></blockquote><h3 id="衍生多个编译作业"><a href="#衍生多个编译作业" class="headerlink" title="衍生多个编译作业"></a>衍生多个编译作业</h3><p>make程序能把编译过程拆分成多个并行的作业。极大加快编译的过程。</p><blockquote><p>$make -jn</p></blockquote><h3 id="安装新内核"><a href="#安装新内核" class="headerlink" title="安装新内核"></a>安装新内核</h3><blockquote><p>%make modules_install </p></blockquote><h2 id="内核开发的特点"><a href="#内核开发的特点" class="headerlink" title="内核开发的特点"></a>内核开发的特点</h2><ul><li>内核编程时既不能访问c库也不能访问标准c头文件。</li><li>内核编程时必须使用GNU C</li><li>内核编程时缺乏像用户空间那样的内存保护机制。</li><li>内核编程时难以执行浮点运算。</li><li>内核给每个进程只有一个很小的定长堆栈。</li><li>由于内核支持异步中断、抢占和SMP，因此必须时刻注意同步和并发。</li><li>要考虑可移植性的重要性。</li></ul><h3 id="无libc库或无标准头文件"><a href="#无libc库或无标准头文件" class="headerlink" title="无libc库或无标准头文件"></a>无libc库或无标准头文件</h3><p>因为对内核来说，C库太大太低效了。但是大部分常用的C库函数在内核中都已经得到了实现。<br>内核头文件位于根目录include目录下。&lt; linux/inotify.h&gt;对应内核include/linux/inotify.h<br>体系结构相关的头文件位于源码树arch/&lt; architecture&gt;/include/asm目录下。内核代码通过如&lt; asm/youwant.h&gt;包含。  </p><blockquote><p>printk(“Hello world’%s’and ‘%d’”,str,i);   </p></blockquote><p>例如内核代码无法调用printf,但它提供printk()。其允许通过一个标志来设置优先级。</p><h3 id="GNU-C"><a href="#GNU-C" class="headerlink" title="GNU C"></a>GNU C</h3><p>gcc是多种GNU编译器的集合，它包含的C编译器既可以编译内核，也可以编译Linux系统上用C语言写的其他代码。   </p><ul><li>内联函数，用于时间要求高，本身长度短的函数。 定义内联函数时需要static 作为关键字，并且用inline限定它。为了类型安全和易读性，优先使用内联函数而不是复杂的宏。 </li><li>内联汇编，gcc支持C函数嵌入汇编指令，需要知道其体系结构。使用asm()指令嵌入汇编代码。Linux内核混用了C语言和汇编语言。在偏近体系结构底层或对执行时间要求严格的地方，一般使用汇编语言，其他大部分代码是用C语言编写的。</li><li>分支声明，对于条件选择语句，gcc内建了优化指令，并封装成了宏。likely()和unlikely()，你的判断正确，性能会得到提升，如果判断错误，性能反而会下降。 </li></ul><h3 id="没有内存保护机制"><a href="#没有内存保护机制" class="headerlink" title="没有内存保护机制"></a>没有内存保护机制</h3><p>在内核中不应该去做访问非法的内存地址，引用空指针一类的事，否则可能一声不响的死掉。内核的内存不分页。</p><h3 id="不要轻易在内核中使用浮点数"><a href="#不要轻易在内核中使用浮点数" class="headerlink" title="不要轻易在内核中使用浮点数"></a>不要轻易在内核中使用浮点数</h3><p>内核并不能完美地支持浮点操作，因为它本身不能陷入。在内核使用浮点数时，除了要人工保存和恢复浮点寄存器，还有一些其他的事情要处理。所以不要在内核中使用浮点操作。</p><h3 id="容积小而固定的栈"><a href="#容积小而固定的栈" class="headerlink" title="容积小而固定的栈"></a>容积小而固定的栈</h3><h3 id="同步和并发"><a href="#同步和并发" class="headerlink" title="同步和并发"></a>同步和并发</h3><h3 id="可移植性的重要性"><a href="#可移植性的重要性" class="headerlink" title="可移植性的重要性"></a>可移植性的重要性</h3><p>大部分C代码应该与体系结构无关，在不同体系结构的计算机上都能够编译和执行。如保持字节序、64位对齐、不假定字长和页面长度等一系列准则都有助于移植性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从内核出发&quot;&gt;&lt;a href=&quot;#从内核出发&quot; class=&quot;headerlink&quot; title=&quot;从内核出发&quot;&gt;&lt;/a&gt;从内核出发&lt;/h1&gt;&lt;h2 id=&quot;内核源码树&quot;&gt;&lt;a href=&quot;#内核源码树&quot; class=&quot;headerlink&quot; title=&quot;内核源
      
    
    </summary>
    
      <category term="读书笔记" scheme="https://github.com/zdkswd/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="纸质书笔记" scheme="https://github.com/zdkswd/tags/%E7%BA%B8%E8%B4%A8%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>[LINUX内核设计与实现]第一章</title>
    <link href="https://github.com/zdkswd/2018/04/13/LINUX%E5%86%85%E6%A0%B8%E8%AE%BE/"/>
    <id>https://github.com/zdkswd/2018/04/13/LINUX内核设/</id>
    <published>2018-04-13T11:45:41.000Z</published>
    <updated>2018-05-16T08:04:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一章主要是讲Linux的历史，而我的第一篇纸质书笔记主要是讲一下我的计划。纸质书做读书笔记的话，任务量会远远大于电子版的图书，所以我争取做到不引用原文，因为那样做任务量过于庞大，这就要求我必须以自己理解的方式概括，这样才能达到预期的效果。之后还会出的纸质书笔记预告：深入理解计算机系统 中英两版。深入理解安卓系统。所以说可以看出直到暑假的这一段时间，我的重点是放在c/c++以及操作系统上，之所以这样做是因为希望未来能够为Tensorflow等开源框架贡献自己的力量。希望大家可以共同学习，共同进步。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一章主要是讲Linux的历史，而我的第一篇纸质书笔记主要是讲一下我的计划。纸质书做读书笔记的话，任务量会远远大于电子版的图书，所以我争取做到不引用原文，因为那样做任务量过于庞大，这就要求我必须以自己理解的方式概括，这样才能达到预期的效果。之后还会出的纸质书笔记预告：深入理
      
    
    </summary>
    
      <category term="读书笔记" scheme="https://github.com/zdkswd/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="纸质书笔记" scheme="https://github.com/zdkswd/tags/%E7%BA%B8%E8%B4%A8%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>[猴子都能懂的Git入门]高级篇</title>
    <link href="https://github.com/zdkswd/2018/04/08/%E7%8C%B4%E5%AD%90%E9%83%BD%E8%83%BD%E6%87%82%E7%9A%84Git%E5%85%A5%E9%97%A8-%E9%AB%98%E7%BA%A7%E7%AF%87/"/>
    <id>https://github.com/zdkswd/2018/04/08/猴子都能懂的Git入门-高级篇/</id>
    <published>2018-04-08T03:09:55.000Z</published>
    <updated>2018-04-11T07:49:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><h2 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a>什么是分支</h2><p>分支是为了将修改记录的整体流程分叉保存。分叉后的分支不受其他分支的影响，所以在同一个数据库里可以同时进行多个修改。</p><h3 id="master分支"><a href="#master分支" class="headerlink" title="master分支"></a>master分支</h3><p>在数据库进行最初的提交后, Git会创建一个名为master的分支。因此之后的提交，在切换分支之前都会添加到master分支里。</p><h2 id="分支的运用"><a href="#分支的运用" class="headerlink" title="分支的运用"></a>分支的运用</h2><h3 id="merge分支"><a href="#merge分支" class="headerlink" title="merge分支"></a>merge分支</h3><p>Merge分支是为了可以随时发布release而创建的分支，它还能作为Topic分支的源分支使用。保持分支稳定的状态是很重要的。如果要进行更改，通常先创建Topic分支，而针对该分支，可以使用Jenkins之类的CI工具进行自动化编译以及测试。</p><p>通常，大家会将master分支当作Merge分支使用。</p><h3 id="Topic分支"><a href="#Topic分支" class="headerlink" title="Topic分支"></a>Topic分支</h3><p>Topic分支是为了开发新功能或修复Bug等任务而建立的分支。若要同时进行多个的任务，请创建多个的Topic分支。</p><p>Topic分支是从稳定的Merge分支创建的。完成作业后，要把Topic分支合并回Merge分支。</p><h2 id="分支的切换"><a href="#分支的切换" class="headerlink" title="分支的切换"></a>分支的切换</h2><p>若要切换作业的分支，就要进行checkout操作。进行checkout时，git会从工作树还原向目标分支提交的修改内容。checkout之后的提交记录将被追加到目标分支</p><h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h3><p>HEAD指向的是现在使用中的分支的最后一次更新。通常默认指向master分支的最后一次更新。通过移动HEAD，就可以变更使用的分支。<br>NOTE:提交时使用~(tilde)和^(caret)就可以指定某个提交的相对位置。最常用的就是相对于HEAD的位置。HEAD后面加上~(tilde）可以指定HEAD之前的提交记录。合并分支会有多个根节点，您可以用^(caret) 来指定使用哪个为根节点。   </p><h3 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h3><p>stash是临时保存文件修改内容的区域。stash可以暂时保存工作树和索引里还没提交的修改内容，您可以事后再取出暂存的修改，应用到原先的分支或其他的分支上。   </p><h2 id="分支的合并"><a href="#分支的合并" class="headerlink" title="分支的合并"></a>分支的合并</h2><p>合并分支有2种方法：使用merge或rebase。使用这2种方法，合并后分支的历史记录会有很大的差别。</p><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>合并 bugfix分支到master分支时，如果master分支的状态没有被更改过,把master分支的位置移动到bugfix的最新分支上，Git 就会合并。这样的合并被称为fast-forward（快进）合并。HEAD还在原位。<br>master分支的历史记录有可能在bugfix分支分叉出去后有新的更新。这种情况下，要把master分支的修改内容和bugfix分支的修改内容汇合起来。合并两个修改会生成一个提交。这时，master分支的HEAD会移动到该提交上。<br>NOTE:执行合并时，如果设定了non fast-forward选项，即使在能够fast-forward合并的情况下也会生成新的提交并合并。  </p><p><img src="https://backlog.com/git-tutorial/cn/img/post/stepup/capture_stepup1_4_5.png" alt="non_fast_forward" title="non_fast_forward"></p><p>一个圆圈代表一个提交</p><h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><h2 id="topic分支和merge分支的运用实例"><a href="#topic分支和merge分支的运用实例" class="headerlink" title="topic分支和merge分支的运用实例"></a>topic分支和merge分支的运用实例</h2><h1 id="分支操作示例"><a href="#分支操作示例" class="headerlink" title="分支操作示例"></a>分支操作示例</h1><h2 id="建立分支"><a href="#建立分支" class="headerlink" title="建立分支"></a>建立分支</h2><blockquote><p>$ git branch &lt; branchname&gt;  </p></blockquote><p>不指定参数直接执行branch命令的话，可以显示分支列表。 前面有*的就是现在的分支。</p><blockquote><p>$ git branch<br> issue1<br> *master</p></blockquote><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><p>执行checkout命令以退出分支。</p><blockquote><p>$ git checkout &lt; branch&gt;</p></blockquote><p>NOTE:在checkout命令指定 -b选项执行，可以创建分支并进行切换。</p><blockquote><p>$ git checkout -b &lt; branch&gt;</p></blockquote><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p>执行merge命令以合并分支。</p><blockquote><p>$ git merge &lt; commit&gt;  </p></blockquote><p>该命令将指定分支导入到HEAD指定的分支。如当HEAD指向issue1时，先切换到master分支，然后把issue1分支导入到master分支。</p><blockquote><p>$ git checkout master<br>$ git merge issue1</p></blockquote><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><p>在branch命令指定-d选项执行，以删除分支。</p><blockquote><p>$ git branch -d &lt; branchname&gt;</p></blockquote><h2 id="用rebase合并"><a href="#用rebase合并" class="headerlink" title="用rebase合并"></a>用rebase合并</h2><p>切换到issue3分支后，对master执行rebase。</p><blockquote><p>$ git checkout issue3<br>$ git rebase master  </p></blockquote><p>rebase的时候，修改冲突后的提交不是使用commit命令，而是执行rebase命令指定 –continue选项。若要取消rebase，指定 –abort选项。</p><blockquote><p>$ git add myfile.txt<br>$ git rebase –continue</p></blockquote><p>这样，在master分支的issue3分支就可以fast-forward合并了。切换到master分支后执行合并.看来rebase是将issue3分支消失而生成一个新的提交，就像fast-forward的情形一样。<br>切换到master分支后执行合并。</p><blockquote><p>$ git checkout master<br>$ git merge issue3  </p></blockquote><p><img src="https://backlog.com/git-tutorial/cn/img/post/stepup/capture_stepup2_8_2.png" alt="rebase" title="rebase">  </p><p>上图为rebase图  </p><p><img src="https://backlog.com/git-tutorial/cn/img/post/stepup/capture_stepup2_7_2.png" alt="merge" title="merge">   </p><p>上图为merge图   </p><p>Merge和rebase都是合并历史记录，但是各自的特征不同。</p><p>merge<br>保持修改内容的历史记录，但是历史记录会很复杂。<br>rebase<br>历史记录简单，是在原有提交的基础上将差异内容反映进去。<br>因此，可能导致原本的提交内容无法正常运行。<br>您可以根据开发团队的需要分别使用merge和rebase。<br>例如，想简化历史记录，<br>在topic分支中更新merge分支的最新代码，请使用rebase。<br>向merge分支导入topic分支的话，先使用rebase，再使用merge。 </p><h1 id="远端数据库"><a href="#远端数据库" class="headerlink" title="远端数据库"></a>远端数据库</h1><h2 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h2><p>首先确认更新的本地数据库分支没有任何的更改。这时只执行fast-forward合并。<br>如果本地数据库的分支有新的历史记录，就需要合并双方的修改。<br>执行pull就可以进行合并。这时，如果没有冲突的修改，就会自动创建合并提交。如果发生冲突的话，要先解决冲突，再手动提交。</p><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><p>执行pull，远程数据库的内容就会自动合并。但是，有时只是想确认本地数据库的内容而不想合并。这种情况下，请使用fetch。<br>执行fetch就可以取得远程数据库的最新历史记录。取得的提交会导入到没有名字的分支，这个分支可以从名为FETCH_HEAD的退出。<br>就相当于在本地数据库建立了一个和远程数据库一样的分支，还没合并。<br>合并后，历史记录会和pull相同。实际上pull的内容是fetch + merge组成的。 </p><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>从本地数据库push到远程数据库时，要fast-forward合并push的分支。如果发生冲突，push会被拒绝的。<br>若要共享在本地数据库创建的分支，需要明确的push。因此，没有执行push就不会给远程数据库带来影响，因而可以自由的创建自己的分支。<br>基本上，远程数据库共享的提交是不能修改的。如果修改的话，跟远程数据库同步的其他数据库的历史记录会变得很奇怪的。</p><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><p>标签是为了更方便地参考提交而给它标上易懂的名称。<br>Git可以使用2种标签：轻标签和注解标签。打上的标签是固定的，不能像分支那样可以移动位置。<br>轻标签：添加名称<br>注解标签：添加名称 添加注解 添加签名<br>一般情况下，发布标签是采用注解标签来添加注解或签名的。轻标签是为了在本地暂时使用或一次性使用。</p><h1 id="使用标签"><a href="#使用标签" class="headerlink" title="使用标签"></a>使用标签</h1><p> 使用tag命令来添加标签，在&lt; tagname&gt;执行标签的名称。  </p><blockquote><p>$ git tag &lt; tagname&gt;</p></blockquote><p> 在HEAD指向的提交里添加名为apple的标签，请执行以下的命令。  </p><blockquote><p>$ git tag apple</p></blockquote><p> 如果没有使用参数而执行tag，可以显示标签列表。</p><blockquote><p>$ git tag   </p></blockquote><p> 如果在log命令添加 –decorate选项执行，可以显示包含标签资料的历史记录。</p><blockquote><p>$ git log –decorate  </p></blockquote><h1 id="添加注解标签"><a href="#添加注解标签" class="headerlink" title="添加注解标签"></a>添加注解标签</h1><p>若要添加注解标签，可以在tag命令指定 -a选项执行,以指定-m选项来添加注解。</p><blockquote><p>$ git tag -a &lt; tagname&gt;     </p></blockquote><blockquote><p>$ git tag -am “连猴子都懂的Git” banana   </p></blockquote><p>如果在tag命令指定-n选项执行，可以显示标签的列表和注解。</p><blockquote><p>$ git tag -n  </p></blockquote><h1 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h1><p>若要删除标签，在tag命令指定 -d选项执行。 </p><blockquote><p>$ git tag -d &lt; tagname&gt;    </p></blockquote><h1 id="改写提交"><a href="#改写提交" class="headerlink" title="改写提交"></a>改写提交</h1><h2 id="修改最近的提交"><a href="#修改最近的提交" class="headerlink" title="修改最近的提交"></a>修改最近的提交</h2><p>指定amend选项执行提交的话，可以修改同一个分支最近的提交内容和注解。</p><p>主要使用的场合：<br>添加最近提交时漏掉的档案<br>修改最近提交的注解</p><h2 id="取消过去的提交"><a href="#取消过去的提交" class="headerlink" title="取消过去的提交"></a>取消过去的提交</h2><p>在revert可以取消指定的提交内容。使用后面要提到的rebase -i或reset也可以删除提交。但是，不能随便删除已经发布的提交，这时需要通过revert创建要否定的提交。  </p><p>主要使用的场合：<br>安全地取消过去发布的提交</p><h2 id="遗弃提交"><a href="#遗弃提交" class="headerlink" title="遗弃提交"></a>遗弃提交</h2><p>在reset可以遗弃不再使用的提交。执行遗弃时，需要根据影响的范围而指定不同的模式，可以指定是否复原索引或工作树的内容。<br>除了默认的mixed模式，还有soft和hard模式。欲了解受各模式影响的部分，请参照下面的表格。  </p><table><thead><tr><th>模式名称</th><th>HEAD的位置</th><th>索引</th><th>工作树   </th></tr></thead><tbody><tr><td>soft</td><td>修改</td><td>不修改</td><td>不修改   </td></tr><tr><td>mixed</td><td>修改</td><td>修改</td><td>不修改   </td></tr><tr><td>hard</td><td>修改</td><td>修改</td><td>修改   </td></tr></tbody></table><p>主要使用的场合：</p><p>复原修改过的索引的状态(mixed)<br>彻底取消最近的提交(hard)<br>只取消提交(soft)</p><h2 id="提取提交"><a href="#提取提交" class="headerlink" title="提取提交"></a>提取提交</h2><p>在cherry-pick，您可以从其他分支复制指定的提交，然后导入到现在的分支。</p><p>主要使用的场合：  </p><p>把弄错分支的提交移动到正确的地方<br>把其他分支的提交添加到现在的分支  </p><h2 id="改写提交历史记录"><a href="#改写提交历史记录" class="headerlink" title="改写提交历史记录"></a>改写提交历史记录</h2><p>在rebase指定i选项，您可以改写、替换、删除或合并提交。  </p><p>主要使用的场合：  </p><p>在push之前，重新输入正确的提交注解<br>清楚地汇合内容含义相同的提交。<br>添加最近提交时漏掉的档案</p><h2 id="汇合分支上的提交，然后一同合并到分支"><a href="#汇合分支上的提交，然后一同合并到分支" class="headerlink" title="汇合分支上的提交，然后一同合并到分支"></a>汇合分支上的提交，然后一同合并到分支</h2><p>merge的特殊选项：squash<br>用这个选项指定分支的合并，就可以把所有汇合的提交添加到分支上。  </p><p>主要使用的场合：</p><p>汇合主题分支的提交，然后合并提交到目标分支。  </p><h1 id="改写提交训练"><a href="#改写提交训练" class="headerlink" title="改写提交训练"></a>改写提交训练</h1><h2 id="commit-–amend"><a href="#commit-–amend" class="headerlink" title="commit –amend"></a>commit –amend</h2><blockquote><p>git commit –amend  </p></blockquote><h2 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h2><blockquote><p>$ git revert HEAD  </p></blockquote><p>在git log中会出现–Revert “添加pull的说明”</p><h2 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h2><blockquote><p>$ git reset –hard HEAD~~  </p></blockquote><p>在git中，我们其实可以通过^和~来定位某个具体的commit，而不用每次都去敲繁琐的hash值。<br>“^”代表父提交,当一个提交有多个父提交时，可以通过在”^”后面跟上一个数字，表示第几个父提交，”^”相当于”^1”.<br>~&lt; n&gt;相当于连续的&lt; n&gt;个”^”.<br>在reset之前的提交可以参照ORIG_HEAD。Reset错误的时候，在ORIG_HEAD上reset 就可以还原到reset前的状态。</p><blockquote><p>$ git reset –hard ORIG_HEAD  </p></blockquote><h2 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h2><blockquote><p>$ git checkout master<br>$ git cherry-pick 99daed2   </p></blockquote><p>如果发生冲突，修改冲突的部分之后再提交。</p><h2 id="用rebase-i-汇合提交"><a href="#用rebase-i-汇合提交" class="headerlink" title="用rebase -i 汇合提交"></a>用rebase -i 汇合提交</h2><p>若要汇合过去的提交，请用rebase -i。  </p><blockquote><p>$ git rebase -i HEAD~~ </p></blockquote><p>两个提交就合并成一个提交了。</p><h2 id="用rebase-i-修改提交"><a href="#用rebase-i-修改提交" class="headerlink" title="用rebase -i 修改提交"></a>用rebase -i 修改提交</h2><h2 id="merge-–squash"><a href="#merge-–squash" class="headerlink" title="merge –squash"></a>merge –squash</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分支&quot;&gt;&lt;a href=&quot;#分支&quot; class=&quot;headerlink&quot; title=&quot;分支&quot;&gt;&lt;/a&gt;分支&lt;/h1&gt;&lt;h2 id=&quot;什么是分支&quot;&gt;&lt;a href=&quot;#什么是分支&quot; class=&quot;headerlink&quot; title=&quot;什么是分支&quot;&gt;&lt;/a&gt;什么是分
      
    
    </summary>
    
      <category term="读书笔记" scheme="https://github.com/zdkswd/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="电子书笔记" scheme="https://github.com/zdkswd/tags/%E7%94%B5%E5%AD%90%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>[猴子都能懂的Git入门]入门篇</title>
    <link href="https://github.com/zdkswd/2018/04/06/%E7%8C%B4%E5%AD%90%E9%83%BD%E8%83%BD%E6%87%82%E7%9A%84Git%E5%85%A5%E9%97%A8-%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <id>https://github.com/zdkswd/2018/04/06/猴子都能懂的Git入门-入门篇/</id>
    <published>2018-04-06T02:03:47.000Z</published>
    <updated>2018-04-09T12:19:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不知道这是第几次学习Git了，每次都是学完过一段就忘了，这次决定自己写出点东西，深入的再把Git再过一遍。写一下自己的东西，真真正正的把Git转化为自己的东西。这次选用的资料是<a href="https://backlog.com/git-tutorial/cn/contents/" target="_blank" rel="noopener">猴子都能懂的Git入门</a>。之所以选用该资料是因为语言比较通俗易懂，而我也正好想把知识总结的通俗易懂一些，算是两重学习。那么话不多说，现在开始吧~~~(写到后面发现这书已经足够通俗，很难再。。。啊，失败。)</p><h1 id="Git的基础"><a href="#Git的基础" class="headerlink" title="Git的基础"></a>Git的基础</h1><h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>git是版本控制工具，用来解决大家对同一文件操作时的协作问题。<br>Git可以在任何时间点，把文档的状态作为更新记录保存起来。因此可以把编辑过的文档复原到以前的状态，也可以显示编辑前后的内容差异。<br>而且，编辑旧文件后，试图覆盖较新的文件的时候（即上传文件到服务器时），系统会发出警告，因此可以避免在无意中覆盖了他人的编辑内容。</p><h2 id="管理历史数据的数据库"><a href="#管理历史数据的数据库" class="headerlink" title="管理历史数据的数据库"></a>管理历史数据的数据库</h2><p>数据库 (Repository) 是记录文件或目录状态的地方，存储着内容修改的历史记录。在数据库的管理下，把文件和目录修改的历史记录放在对应的目录下。   </p><h3 id="远程数据库和本地数据库。"><a href="#远程数据库和本地数据库。" class="headerlink" title="远程数据库和本地数据库。"></a>远程数据库和本地数据库。</h3><p>Git的数据库分为远程数据库和本地数据库的两种。</p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>创建本地数据库的方法有两种：一种是创建全新的数据库，另一种是复制远程数据库。</p><h2 id="修改记录的提交"><a href="#修改记录的提交" class="headerlink" title="修改记录的提交"></a>修改记录的提交</h2><p>若要把文件或目录的添加和变更保存到数据库，就需要进行提交。<br>执行提交后，数据库中会生成上次提交的状态与当前状态的差异记录（也被称为revision）。<br>Tips:不同类别的修改 (如：Bug修复和功能添加) 要尽量分开提交，以方便以后从历史记录里查找特定的修改内容。<br>执行提交时，系统会要求输入提交信息。请务必输入提交信息，因为在空白的状态下执行提交会失败的。<br>Tips:查看其他人提交的修改内容或自己的历史记录的时候，提交信息是需要用到的重要资料。所以请用心填写修改内容的提交信息，以方便别人理解。<br>以下是Git的标准注解：</p><blockquote><p>第1行：提交修改内容的摘要<br>第2行：空行<br>第3行以后：修改的理由   </p></blockquote><p>请以这种格式填写提交信息。</p><h2 id="工作树和索引"><a href="#工作树和索引" class="headerlink" title="工作树和索引"></a>工作树和索引</h2><p>在Git管理下，大家实际操作的目录被称为工作树。</p><p>在数据库和工作树之间有索引，索引是为了向数据库提交作准备的区域。</p><p>Git在执行提交的时候，不是直接将工作树的状态保存到数据库，而是将设置在中间索引区域的状态保存到数据库。因此，要提交文件，首先需要把文件加入到索引区域中。</p><p>凭借中间的索引，可以避免工作树中不必要的文件提交，还可以将文件修改内容的一部分加入索引区域并提交。</p><h1 id="教程1-Git基础"><a href="#教程1-Git基础" class="headerlink" title="教程1 Git基础"></a>教程1 Git基础</h1><h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><p>略</p><h2 id="初期设定"><a href="#初期设定" class="headerlink" title="初期设定"></a>初期设定</h2><p>安装Git之后，请输入您的用户名和电子邮件地址。该设置操作在安装Git后进行一次就够了。这些信息将作为提交者信息显示在更新历史中。</p><p>Git的设定被存放在用户本地目录的.gitconfig档案里。可以直接编辑配置文件。</p><blockquote><p>$ git config –global user.name “&lt;用户名&gt;”<br>$ git config –global user.email “&lt;电子邮件&gt;”</p></blockquote><blockquote><p>$ git config –global color.ui auto  //git彩色显示</p></blockquote><p>可以为Git命令设定别名。例如：把「checkout」缩略为「co」，然后就使用「co」来执行命令。</p><blockquote><p>$ git config –global alias.co checkout</p></blockquote><p>如果在Windows使用命令行 (Git Bash), 含非ASCII字符的文件名会显示为 “\346\226\260\350\246…”。若设定如下，就可以让含非ASCII字符的文件名正确显示了。</p><blockquote><p>$ git config –global core.quotepath off   </p></blockquote><p>若在Windows使用命令行，您只能输入ASCII字符。所以，如果您的提交信息包含非ASCII字符，请不要使用-m选项，而要用外部编辑器输入。 </p><p>外部编辑器必须能与字符编码UTF-8和换行码LF兼容。</p><blockquote><p>git config –global core.editor “\”[使用编辑区的路径]\””</p></blockquote><h2 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h2><p>在目录下使用init命令将该目录移动到本地的Git数据库。</p><blockquote><p>$ git init</p></blockquote><h2 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h2><p>对于一个文件，使用status命令确认工作树和索引的状态。</p><blockquote><p>$ git status</p></blockquote><p>将文件加入到索引，要使用add命令。在&lt; file&gt;指定加入索引的文件。用空格分割可以指定多个文件。</p><blockquote><p>$ git add &lt; file&gt;..<br>$ git add . //将所有的文件加入索引</p></blockquote><p>已加入到索引，我们就可以提交文件了。</p><blockquote><p>$ git commit -m “”   </p></blockquote><p>使用log命令，我们可以在数据库的提交记录看到新的提交。</p><blockquote><p>$ git log</p></blockquote><p>commit ac56e474afbbe1eab9ebce5b3ab48ac4c73ad60e<br>Author: eguchi <a href="mailto:&#101;&#103;&#117;&#99;&#x68;&#105;&#x40;&#110;&#x75;&#108;&#97;&#x62;&#46;&#x63;&#x6f;&#x2e;&#106;&#112;" target="_blank" rel="noopener">&#101;&#103;&#117;&#99;&#x68;&#105;&#x40;&#110;&#x75;&#108;&#97;&#x62;&#46;&#x63;&#x6f;&#x2e;&#106;&#112;</a><br>Date:   Thu Jul 12 18:00:21 2012 +0900<br>first commit</p><p>安装git的同时会安装名为gitk的工具。使用这个工具，可以在GUI下确认提交记录。</p><blockquote><p>$ gitk </p></blockquote><h1 id="共享数据库"><a href="#共享数据库" class="headerlink" title="共享数据库"></a>共享数据库</h1><h2 id="push到远端数据库"><a href="#push到远端数据库" class="headerlink" title="push到远端数据库"></a>push到远端数据库</h2><p>注意：对于别人的项目你只能 pull 不能 push，只有你自己（或有权限）的项目才能 push。或者说只有你把 ssk key 添加到账号里才能无密码 push。如果你想参与别人的开源项目，先建立自己的 github 账号，然后 fork 那个项目到自己的账号里，然后在自己的项目里修改，然后发出 pull request，然后看对方愿不愿意接受你的提交。</p><p>作者：Intopass<br>链接：<a href="https://www.zhihu.com/question/29894004/answer/45956664" target="_blank" rel="noopener">https://www.zhihu.com/question/29894004/answer/45956664</a><br>来源：知乎</p><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><p>为了将本地数据库的修改记录共享到远程数据库，必须上传本地数据库中存储的修改记录。<br>所以远程数据库的修改记录就会和本地数据库的修改记录保持同步。</p><h2 id="克隆远程数据库"><a href="#克隆远程数据库" class="headerlink" title="克隆远程数据库"></a>克隆远程数据库</h2><h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><p>执行克隆后，远程数据库的全部内容都会被下载。之后您在另一台机器的本地数据库上进行操作。<br>克隆后的本地数据库的变更履历也会被复制，所以可以像原始的数据库一样进行查看记录或其他操作。</p><h2 id="从远程服务器Pull"><a href="#从远程服务器Pull" class="headerlink" title="从远程服务器Pull"></a>从远程服务器Pull</h2><p>若是共享的远程数据库由多人同时作业，那么作业完毕后所有人都要把修改推送到远程数据库。然后，自己的本地数据库也需要更新其他人推送的变更内容。</p><h3 id="Pull"><a href="#Pull" class="headerlink" title="Pull"></a>Pull</h3><p>进行拉取(Pull) 操作，就是从远程数据库下载最近的变更日志，并覆盖自己本地数据库的相关内容。</p><h2 id="clone与pull的区别"><a href="#clone与pull的区别" class="headerlink" title="clone与pull的区别"></a>clone与pull的区别</h2><p>clone是本地没有repository时，将远程repository整个下载过来。</p><p>pull是本地有repository时，将远程repository里新的commit数据(如有的话)下载过来，并且与本地代码merge。</p><h1 id="对远程服务器进行操作"><a href="#对远程服务器进行操作" class="headerlink" title="对远程服务器进行操作"></a>对远程服务器进行操作</h1><h2 id="向远程数据库推送本地数据库的修改记录"><a href="#向远程数据库推送本地数据库的修改记录" class="headerlink" title="向远程数据库推送本地数据库的修改记录"></a>向远程数据库推送本地数据库的修改记录</h2><p>远程数据库命名为“origin”。</p><p>请使用remote指令添加远程数据库。在&lt; name&gt;处输入远程数据库名称，在&lt; url&gt;处指定远程数据库的URL。</p><blockquote><p>$ git remote add   &lt; name&gt; &lt; url&gt;</p></blockquote><p>TIPS:执行推送或者拉取的时候，如果省略了远程数据库的名称，则默认使用名为”origin“的远程数据库。因此一般都会把远程数据库命名为origin。</p><p>使用push命令向数据库推送更改内容。&lt; repository&gt;处输入目标地址，&lt; refspec&gt;处指定推送的分支。</p><blockquote><p>$ git push &lt; repository&gt; &lt; refspec&gt;…</p></blockquote><p>当执行命令时，如果您指定了-u选项，那么下一次推送时就可以省略分支名称了。但是，首次运行指令向空的远程数据库推送时，必须指定远程数据库名称和分支名称。</p><blockquote><p>$ git push -u origin master</p></blockquote><p>使用clone指令可以复制数据库，在&lt; repository&gt;指定远程数据库的URL，<br>在&lt; directory&gt;指定新目录的名称。</p><blockquote><p>$ git clone &lt; repository&gt; &lt; directory&gt;<br>$ git clone <a href="https://nulab.backlog.jp/git/BLG/tutorial.git" target="_blank" rel="noopener">https://nulab.backlog.jp/git/BLG/tutorial.git</a> tutorial2</p></blockquote><p>当在克隆的数据库目录执行推送时，您可以省略数据库和分支名称。</p><blockquote><p>$ git push   </p></blockquote><p>使用pull指令进行拉取操作。省略数据库名称的话，会在名为origin的数据库进行pull。</p><blockquote><p>$ git pull &lt; repository&gt; &lt; refspec&gt;…<br>$ git pull origin master</p></blockquote><h1 id="合并修改记录"><a href="#合并修改记录" class="headerlink" title="合并修改记录"></a>合并修改记录</h1><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p>在执行pull之后，进行下一次push之前，如果其他人进行了推送内容到远程数据库的话，那么你的push将被拒绝。<br>这种情况下，在读取别人push的变更并进行合并操作之前，你的push都将被拒绝。这是因为，如果不进行合并就试图覆盖已有的变更记录的话，其他人push的变更（图中的提交C）就会丢失。     </p><p>合并的时候，Git会自动合并已有的变更点！不过，也存在不能自动合并的情况。此时需要手动合并。</p><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>如果远程数据库和本地数据库的同一个地方都发生了修改的情况下，因为无法自动判断要选用哪一个修改，所以就会发生冲突。<br>Git会在发生冲突的地方修改文件的内容   </p><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br>这就是发生<br>  》  =======<br>冲突的地方<br>    &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</p><p>==分割线上方是本地数据库的内容,<br>下方是远程数据库的编辑内容。<br>需要手动的修改。</p><h1 id="整合修改记录操作"><a href="#整合修改记录操作" class="headerlink" title="整合修改记录操作"></a>整合修改记录操作</h1><p>为了把变更内容推送到远程数据库，我们必须手动解决冲突。</p><blockquote><p>$ git pull origin master    </p></blockquote><p>导入两方的修改，并删除多余的标示行以解决冲突</p><h1 id="Github多人协作的三种方式"><a href="#Github多人协作的三种方式" class="headerlink" title="Github多人协作的三种方式"></a>Github多人协作的三种方式</h1><ol><li>Fork 方式<br>pull request是一个request，它的目的是让别人pull你的东西。</li><li>组织<br>组织的所有者可以针对不同的代码仓库建立不同访问权限的团队。</li><li>合作者<br>代码仓库的所有者可以为单个仓库增加具备只读或者读写权限的协作者。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;不知道这是第几次学习Git了，每次都是学完过一段就忘了，这次决定自己写出点东西，深入的再把Git再过一遍。写一下自己的东西，真真正正的把Gi
      
    
    </summary>
    
      <category term="读书笔记" scheme="https://github.com/zdkswd/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="电子书笔记" scheme="https://github.com/zdkswd/tags/%E7%94%B5%E5%AD%90%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>新增评论区功能</title>
    <link href="https://github.com/zdkswd/2018/04/05/%E6%96%B0%E5%A2%9E%E8%AF%84%E8%AE%BA%E5%8C%BA%E5%8A%9F%E8%83%BD/"/>
    <id>https://github.com/zdkswd/2018/04/05/新增评论区功能/</id>
    <published>2018-04-05T09:49:48.000Z</published>
    <updated>2018-04-05T09:58:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天算是折腾了一下评论区，不得不佩服评论区作者的脑洞。运用github issues的机制来自己创建评论区，运用插件—<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">传送门</a>。</p><p>在此过程中也算踩了一些坑，特别感谢有人能无私分享自己的踩坑经历–<a href="http://ihtc.cc/2018/02/25/2018-02-25%20_Gitment%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E6%8E%A5%E5%85%A5%E8%B8%A9%E5%9D%91%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">踩坑教程</a></p><p>我自己也顺便试着改了下模板的源码，感觉有、收获。</p><p>分享出去，如果可以帮助到更多的人，那将将是更大的快乐。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天算是折腾了一下评论区，不得不佩服评论区作者的脑洞。运用github issues的机制来自己创建评论区，运用插件—&lt;a href=&quot;https://imsun.github.io/gitment/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;
      
    
    </summary>
    
    
      <category term="个人博客" scheme="https://github.com/zdkswd/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+ github Pages建立个人博客</title>
    <link href="https://github.com/zdkswd/2018/04/04/Hexo+github-Pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://github.com/zdkswd/2018/04/04/Hexo+github-Pages建立个人博客/</id>
    <published>2018-04-04T09:30:56.000Z</published>
    <updated>2018-04-04T09:40:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了一段时间，还算顺利的把博客给建立好了，以下是参考链接<br><a href="https://my.oschina.net/ryaneLee/blog/638440" target="_blank" rel="noopener">建立过程</a><br>这个过程大体上是没有问题的，但是我碰到几个小小的问题，大家也可以参考一下</p><ul><li>当打开配置文件时，文中说的是用记事本打开，但是我用记事本打开文本完全没有格式，再用写字板打开时，豁然开朗。</li><li>再一个就是当上传以后访问自己的首页时,输入<a href="https://zdkswd.github.io" target="_blank" rel="noopener">https://zdkswd.github.io</a> 死活打不开，我又检查了好几遍，后来直接输入zdkswd.github.io就成功进去了，之后再输入<a href="https://zdkswd.github.io" target="_blank" rel="noopener">https://zdkswd.github.io</a>  又可以愉快的访问了，感觉特别神奇，也感觉很费解。  </li></ul><p>第一篇博客就先到这里吧，这一段时间我会上传一些读书笔记，毕竟砖头书不好啃，这既是分享，又是进一步的学习，也是对我自己的一种激励。希望这个博客真正能起到学习，练习，积累，分享的作用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;折腾了一段时间，还算顺利的把博客给建立好了，以下是参考链接&lt;br&gt;&lt;a href=&quot;https://my.oschina.net/ryaneLee/blog/638440&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;建立过程&lt;/a&gt;&lt;br&gt;这个过程大体上
      
    
    </summary>
    
    
      <category term="个人博客" scheme="https://github.com/zdkswd/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>

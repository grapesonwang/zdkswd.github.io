{"meta":{"title":"ZDK's blog","subtitle":null,"description":null,"author":"ZDK","url":"https://github.com/zdkswd"},"pages":[{"title":"categories","date":"2018-05-16T08:57:06.000Z","updated":"2018-05-16T08:58:10.000Z","comments":false,"path":"categories/index.html","permalink":"https://github.com/zdkswd/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-05-16T07:23:52.000Z","updated":"2018-05-16T08:58:32.000Z","comments":false,"path":"tags/index.html","permalink":"https://github.com/zdkswd/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"[Linux内核设计与实现]进程调度","slug":"进程调度","date":"2018-05-15T13:39:12.000Z","updated":"2018-05-15T13:42:02.000Z","comments":true,"path":"2018/05/15/进程调度/","link":"","permalink":"https://github.com/zdkswd/2018/05/15/进程调度/","excerpt":"","text":"多任务现代Linux系统也许有100个进程在内存，但是只有一个处于可运行状态。Linux是抢占式多任务模式。 Linux的进程调度Linux2.5内核开始采用O（1）调度程序，对大服务器工作负载很理想但对于交互性桌面系统表现不佳。2.6.23内核后使用RSDL增加了交互性，此时被称为CFS（完全公平调度算法） 策略I/O消耗型和处理器消耗型的进程GUI属于I/O消耗型，多数时间都在等待键鼠交互操作。应当降低处理器消耗型的调度频率，以延长其运行时间。Linux更倾向于IO消耗型进程，也并未忽略处理器消耗型进程。 进程优先级Linux采用了两种不同范围的优先级范围。1：使用nice值，范围【-20，19】，默认0，越大优先级越低。Linux nice代表时间片比例，mac os nice代表时间片的绝对值。2：实时优先级，其值可配。范围【0，99】，越高优先级越大。任何实时进程优先级都高于普通进程。 时间片Linux的CFS调度器并没有直接分配时间片到进程，将处理器的使用比划分给了进程。进程所获处理器的时间和负载密切相关。受nice值得影响。Linux的CFS调度器抢占时机取决于进程的处理器使用比，若大于当前进程则抢占。 调度策略的活动对于一个文字编辑程序和一个视频处理程序，一般操作系统会分配文字编辑器更高的优先级和更多的时间片。Linux则是nice值相同，即平分50%时间，但是当文字编辑程序要使用处理器时，CFS发现其时间没到50%，会抢占视频处理程序执行。 Linux调度算法调度器类Linux调度器是模块方式，可以针对不同类型的进程选择合适的调度算法。完全公平调度（CFS）是针对普通进程的调度类。 Unix系统的进程调度CFS完全摒弃时间片而是分配进程一个处理器的使用比重，这样CFS确保了进程调度有恒定的公平性，将切换频率置于不断变动中。 公平调度CFS的最小粒度（最小时间片长度）为1ms，时间片分配时间根据目标延迟以及nice值决定的比例计算而得。所以说其实如果进程无限大的话，改法并不公平。但是能保证正常情况下是公平的。 Linux调度的实现时间记账 所有的调度器都必须对进程运行时间做记账。 调度器实体结构,CFS不再有时间片的概念，但是它也必须维护每个进程运行时间记账，为了确保每个进程只在公平分配给它的处理器时间运行。CFS使用调度器实体结构struct sched_entity作为名为se的成员变量，嵌入进程描述符struct task_struct内。 虚拟实时，struct sched_entity结构中的vruntime变量存放进程的虚拟运行时间，虚拟时间是以ns为单位的，与定时器节拍不再相关。vruntime可以准确地测量给定进程的运行时间，而且可知道谁应该是下一个被运行的进程。 进程选择当CFS需要选择下一个运行进程时，它会挑一个具有最小vruntime的进程。CFS使用红黑树来组织可运行进程队列，并利用其迅速找到最小的vruntime值的进程。红黑树是一种以树节点形式存储的数据，这些数据都对应一个键值，可通过键值快速检索节点上的数据。 挑选下一个任务，CFS调度器选取待运行的下一个进程，是所有进程中vruntime最小的那一个，对应的便是树最左侧的叶子节点。 向树中加入进程，CFS如何将进程加入rbtree中，以及如何缓存最左叶子节点。这一切发生在进程变为可运行状态（被唤醒）或是通过fork()调用第一次创建进程时。enqueue_entity()函数实现了这一目的。改函数更新运行时间和其他一些统计数据，然后调用_enqueue_entity()进行繁重的插入操作，把数据项真正插入到红黑树中。 从树中删除进程, 删除动作发生在进程堵塞或者终止时。调度器入口进程调度的主要入口点是函数schedule()，它会找到一个最高优先级的调度类，其需要有自己的可运行队列。睡眠和唤醒休眠（被阻塞）进程把自己标记成休眠状态，从可执行红黑树中移出，放入等待队列，然后调用schedule()选择和执行一个其他进程。唤醒的过程刚好相反：进程被设置为可执行状态，然后再从等待队列中移到可执行红黑树中。 等待队列， 等待队列是由等待某些事件发生的进程组成的简单链表。 唤醒， 唤醒指定等待队列上的所有进程。抢占和上下文切换上下文切换，就是从一个可执行进程切换到另一个可执行的进程。由函数context_switch()负责，每当新的进程被选出来准备投入运行时，schedule()就会调用该函数。内核提供了一个need_resched标志表明是否需要重新执行一次调度，内核也就知道什么时候调用schedule()。当某个进程应该被抢占或优先级高的进程进入可执行状态时或中断返回或系统调用返回用户空间，会设置标志位。用户抢占内核即将返回用户空间的时候，如果need_resched标志被设置，会导致schedule()被调用，此时就会发生用户抢占。即用户抢占发生在 从系统调用返回用户空间时。 从中断处理程序返回用户空间时。 内核抢占Linux完整地支持内核抢占，只要重新调度是安全的，内核就可以在任何时候抢占正在执行的内核任务。安全即没有持有锁，即preempy_count=0且need_resched被设置，中断返回内核空间时，就可调度。同样若内核阻塞或显式调用schedule()也会显式抢占。 实时调度策略Linux提供了两种实时调度策略：SCHED_FIFO和SCHED_RR，普通的非实时的调度策略是SCHED_NORMAL.这些策略被一个特殊的实时调度器管理。 SCHED_FIFO, 不基于时间片，可以一直执行下去，其比任何SCHED_NORMAL级的进程都先得到调度。更高优先级的SCHED_FIFO或SCHED_RR才能抢占。优先级一样的就轮流执行。 SCHED_RR,带有时间片的SCHED_FIFO，耗尽时间片时，只能调度同一优先级的进程。【 总结】：对于SCHED_FIFO进程，高优先级总是立即抢占低优先级进程，但低优先级决不能抢占SCHED__RR任务，即使它的时间片耗尽。Linux提供的是软实时工作方式，SCHED_RR与SCHED_FIFO优先级范围【0，99】，而SCHED_NORMAL使用nice值。与调度相关的系统调度Linux提供了一个系统调用族，用于管理与调度程序的相关参数。这些系统调用可以用来操作和处理进程优先级、调度策略及处理器绑定，同时还提供了显式地将处理器交给其他进程的机制。与调度策略和优先级相关的系统调用sched_setscheduler()和sched_getscheduler()用于设置和获取进程的调度策略和实时优先级。sched_setparam()和sched_getparam()用于设置和获取进程的实时优先级。与处理器绑定有关的系统调用Linux调度程序提供强制的处理器绑定机制。放弃处理器时间Linux通过sched_yield()系统调用，提供了一种让进程显式地将处理器时间让给其他等待执行进程的机制。","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"https://github.com/zdkswd/categories/读书笔记/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/zdkswd/tags/Linux/"}]},{"title":"初识makefile_make_cmake","slug":"cmake","date":"2018-04-29T14:11:20.000Z","updated":"2018-04-29T14:17:14.000Z","comments":true,"path":"2018/04/29/cmake/","link":"","permalink":"https://github.com/zdkswd/2018/04/29/cmake/","excerpt":"","text":"初识makefile,make,cmake什么是makefilemake命令执行时，需要一个 Makefile 文件，以告诉make命令需要怎么样的去编译和链接程序。makefile关系到了整个工程的编译规则。makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为makefile就像一个Shell脚本一样，其中也可以执行操作系统的命令。只要我们的Makefile写得够好，所有的这一切，我们只用一个make命令就可以完成，make命令会自动智能地根据当前的文件修改的情况来确定哪些文件需要重编译，从而自己编译所需要的文件和链接目标程序。 什么是makemakefile带来的好处就是——“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大的提高了软件开发的效率。 make是一个命令工具，是一个解释makefile中指令的命令工具，一般来说，大多数的IDE都有这个命令，比如：Delphi的make，Visual C++的nmake，Linux下GNU的make。可见，makefile都成为了一种在工程方面的编译方法（包括链接）。 关于程序的编译和链接在大多数时候，由于源文件太多，编译生成的中间目标文件太多，而在链接时需要明显地指出中间目标文件名，这对于编译很不方便，所以，我们要给中间目标文件打个包，在Windows下这种包叫“库文件”（Library File)，也就是 .lib 文件，在UNIX下，是Archive File，也就是 .a 文件。Linux中的.so。一个lib文件是obj文件的集合。源文件首先会生成中间目标文件，再由中间目标文件生成执行文件。在编译时，编译器只检测程序语法，和函数、变量是否被声明。如果函数未被声明，编译器会给出一个警告，但可以生成Object File。而在链接程序时，链接器会在所有的Object File中找寻函数的实现，如果找不到，那到就会报链接错误码 文件路径usr文件夹称为是Unix System Resource，即Unix系统资源的缩写。 bin文件夹是一个二进制程序文件夹1.bin是binary的缩写，代表的意思是二进制，二进制数据是用0和1两个数码来表示的数。2.bin这个文件夹里存放的是二进制可执行的文件，比如exe，msi，com等的都是二进制文件，双击就能运行。 GUN下面绝大部分应用的编译系统都是用automake。于是乎，你看到的很多很多应用都安装在了/usr/local/目录下然后通常/usr/bin下面的都是系统预装的可执行程序，会随着系统升级而改变/usr/local/bin目录是给用户放置自己的可执行程序的地方，推荐放在这里，不会被系统升级而覆盖同名文件安装好的lib文件存放在“/usr/local/lib”文件夹，h文件存放在“/usr/local/include”（Unix） 什么是cmakeCMake是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装(编译过程)。他能够输出各种各样的makefile或者project文件，能测试编译器所支持的C++特性,类似UNIX下的automake。只是 CMake 的组态档取名为 CMakeLists.txt。cmake是跨平台项目管理工具，它用更抽象的语法来组织项目。在windows下它会支持生成visual studio的工程，在linux下它会生成Makefile，甚至它还能生成eclipse工程文件。也就是说，从同一个抽象规则出发，它为各个编译器定制工程文件。 dlldll存在于windows中 openCV安装过程 mkdir releasecd releasecmake -D CMAKE_BUILD_TYPE=RELEASE -D 换行CMAKE_INSTALL_PREFIX=usr/local/opencv3.1.0 -G “Unix Makefiles” ..makesudo make install","categories":[{"name":"计算机科学","slug":"计算机科学","permalink":"https://github.com/zdkswd/categories/计算机科学/"}],"tags":[{"name":"软件构筑","slug":"软件构筑","permalink":"https://github.com/zdkswd/tags/软件构筑/"}]},{"title":"李宏毅2017听课笔记1-Where does the error come from?","slug":"李宏毅error","date":"2018-04-25T14:48:13.000Z","updated":"2018-04-25T14:53:18.000Z","comments":true,"path":"2018/04/25/李宏毅error/","link":"","permalink":"https://github.com/zdkswd/2018/04/25/李宏毅error/","excerpt":"","text":"李宏毅2017听课笔记1-Where does the error come from? 这么多线是多次试验，每次试验拟合出一条红线 在这里直观的解释了为什么简单的模型偏差更大，因为最终是在函数集中选取最佳函数，因为函数简单的话，一开始划定的范围就较小。 正则化会伤害bias，因为只选择更平滑的曲线，相当于划了范围。（其实是让模型更简单了） 分为训练集，验证集，测试集","categories":[{"name":"听课笔记","slug":"听课笔记","permalink":"https://github.com/zdkswd/categories/听课笔记/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"https://github.com/zdkswd/tags/机器学习/"}]},{"title":"李宏毅2017听课笔记0","slug":"李宏毅2017听课笔记0","date":"2018-04-25T01:26:25.000Z","updated":"2018-04-26T14:11:20.000Z","comments":true,"path":"2018/04/25/李宏毅2017听课笔记0/","link":"","permalink":"https://github.com/zdkswd/2018/04/25/李宏毅2017听课笔记0/","excerpt":"","text":"李宏毅2017听课笔记0前言之前听了吴恩达2014大部分的课以及吴恩达最近在网易云上的CNN课程。听闻李宏毅的课程不错，主要比较系统全面，来听一哈喽。不错的博客 0-1Introduction找出function 准备一个function set (model) 机器决定function们的好坏 找出最好的function Deep Learning：分类，非线性 Learning Map Reinforcement Learning在实际运用中，以上方法并不能解决全部问题，常常会遇到Beyond Classification的情况，比如语音识别，人脸识别，语言翻译等，那么就要通过增强学习来解决问题。增强学习的一个非常知名的应用就是 google 阿法狗。 Reinforcement Learning VS SupervisedSupervised 就像给了机器一个点读机，他听到一句话时可以看到其含义，每一句话都有标签，就像有一个手把手教他的老师。而Reinforcement Learning 就像跟女朋友对话，反复讲来回讲很多句话，直到女朋友觉得你无言以对愤然离去，机器唯一可以知道的就是他做的好还是不好，除此之外没有任何information。而这更像人类现实生活中的学习过程，必须自己像哪里做得好做得不够好，怎么修正。 Learning Map: scenario:学习情景，不受自己控制。意思是你现在有什么类型的 training data。 machine learning scenario Supervised Learning 有标签data Semi-supervised Learning 部分有标签data Unsupervised Learning 无标签data Transfer Learning 一堆不相干data Reinforcement Learning 只有来自外界的评价 task，意思是现在function的output是什么，只体现在supervised中，但其实可以插在以上五种Learning的每一种内。 machine learning task(output) Regression scalar Classification class1、class2…之一 Structured Learning 有结构的内容 Method方法模型，比如在Classification中有Linear模型 or Non-linear模型，我们可以将绿色部分插入任何红色部分中。","categories":[{"name":"听课笔记","slug":"听课笔记","permalink":"https://github.com/zdkswd/categories/听课笔记/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"https://github.com/zdkswd/tags/机器学习/"}]},{"title":"[Linux内核设计与实现]进程管理","slug":"进程管理","date":"2018-04-16T10:50:51.000Z","updated":"2018-04-28T01:52:02.000Z","comments":true,"path":"2018/04/16/进程管理/","link":"","permalink":"https://github.com/zdkswd/2018/04/16/进程管理/","excerpt":"","text":"进程内核调度的对象是线程，而不是进程。Linux系统的线程实现非常特别：它对线程和进程并不特别区分。进程提供两种虚拟机制，虚拟处理器与虚拟内存。一个是进程独享处理器的假象一个是独享内存资源的假象。线程之间共享虚拟内存，各自有虚拟处理器。父进程调用fork()复制现有进程创建一个全新的进程子进程。 每个线程都有一个独立的程序计数器、进程栈和一组进程寄存器。内核调度的对象是线程，而不是进程。Linux系统的线程实现非常特别：它对线程和进程并不特别区分。进程提供两种虚拟机制，虚拟处理器与虚拟内存。一个是进程独享处理器的假象一个是独享内存资源的假象。线程之间共享虚拟内存，各自有虚拟处理器。进程的另一个名字是task，Linux内核通常把进程也叫做任务。 进程描述符及任务结构内核把进程的列表存放在任务列表（task list）的双向循环列表中。链表的每一项都是类型为task_struct称为进程描述符的结构中，该结构相对较大，包含的数据能够完整的描述一个正在运行的程序：打开的文件，进程地址空间，挂起信号，进程状态及其他。 分配进程描述符Linux通过slab分配器分配task_struct结构,这样能够对象复用和缓存着色。使用slab动态生成task_struct需要用到结构thread_info,其task域有指向实际进程描述符的指针。每个任务的thread_info在它的内核栈的尾端分配。 进程描述符的存放内核通过唯一标识符PID（process indentification value）来标识每个进程，PID存放在进程描述符。为了兼容性设置其为short int型，故其最大值为32768.但是对于大型服务器需要更大值。可以不考虑兼容性修改/proc/sys/kernel/pid_max提高上限。 内核访问任务需要获取指向task_struct的指针，故通过宏找到当前正在运行的进程描述符的速度就尤为重要。硬件的结构体系不同，宏的实现不同。例如有的体系结构有专用寄存器用于加快访问task_struct的速度，x86结构寄存器并不富余，就只能通过计算偏移间接查找task_struct。 进程状态task_struct的state域描述当前状态，必为五中之一 TASK_RUNNING(运行)在运行或在运行队列等待 TASK_INTERRUPIBLE(可中断)被阻塞 TASK_UNINTERRUPTIBLE（不可中断）接到信号也不会唤醒 _TASK_TRACED被其他进程跟踪 _TASK_STOPPED停止执行 设置当前的进程状态调整某个进程状态 set_task_state(task,state); 进程上下文可执行代码是进程的重要组成部分。这些代码从一个可执行文件载入到进程的地址空间执行，一般在用户空间执行，执行系统调用或触发异常陷入内核空间。对内核的访问必须经过明确定义的接口。 进程家族树Linux和Unix一样所有的进程都是PID为1的init进程的后代。内核在系统启动的最后阶段启动init进程读取系统初始化脚本（initscript）并执行其他相关程序最终完成系统启动整个过程。init进程的进程描述符是作为init_task静态分配的。对于当前task_struct，可以通过task_struct类型parent指针访问其父进程（必有一个），还包含一个children的子进程链表。 进程创建许多其他操作系统：首先在新的地址空间创建进程，读入可执行文件，最后开始执行。Unix：首先通过fork（）拷贝当前进程创建一个子进程，父子进程区别仅限于PID，PPID（子进程将其设为父进程PID值）和某些资源统计量。exec（）负责读取可执行文件并将其载入地址空间运行。 写时拷贝Linux的fork（）采用写时拷贝，只有子进程在父进程进行写入时再进行拷贝，其他的时候是只读共享。所以fork（）的实际开销就是复制父进程页表以及创建PID。 fork（）Linux通过clone（）系统调用实现fork（）fork（）-调用-&gt;clone()-调用-&gt;do_fork()（完成创建的大部分工作）-调用-&gt;copy_process()copy_process工作: 调用dup_task_strucr()为新进程创建一个内核栈、thread_info和task_struct，此时，父子进程描述符完全一样。 检查并确保新创建这个进程后进程数目没有超出资源限制。 子进程着手于区别父进程。task_struct的许多成员被清零或设为初始值。 子进程的状态被设置为TASK_UNINTERRUPTIBLE，以保证它不会投入运行。 copy_process()调用copy_flags()以更新task_struct的flags成员。表明进程是否拥有超级用户权限的PF_SUPERRIV标志被清0，表示进程还没有调用exec()函数的PF_FORKNOEXEC标志被设置。 调用alloc_pid()为新进程分配一个分配一个有效的PID。 根据传递给clone()的参数标志，copy_process()拷贝或共享打开的文件、文件系统信息、信息处理函数、进程地址空间和命名空间等。一般，这些资源会所有线程共享，否则资源对每个进程是不同的，因此拷贝到这里。 最后，copy_process做扫尾工作并返回一个指向子进程的指针。 如果copy_process()成功返回do_fork()，新创进程被唤醒且内核有意让其首先执行。因为一般子进程都会马上调用exec()函数，可以避免父进程首先执行可能的写入造成的额外开销。 vfork（）除了不拷贝父进程的页表项以外，vfork()和fork()功能相同。基本没啥用。 线程在Linux中的实现Linux中，线程具有task_struct,它看起来就是普通进程，只是和其他一些进程共享某些资源，如地址空间。对Linux来说，线程只是进程间共享资源的手段。 创建线程线程创建于进程类似，只是在调用clone时需要传递一些参数标明需要共享的资源。创建Linux进程所花时间和其他操作系统创建线程要少。 内核线程独立运行在内核空间的标准进程，和普通进程区别在于没有独立地址空间。只在内核空间运行，和普通进程一样，可以被调度，也可以被强占。新的任务是由kthread内核进程通过clone()系统调用而创建的。内核线程启动后就一直运行到调用do_exit（）退出或其他部分调用kthread_stop()退出。 进程终结终结时，释放资源并告诉父进程。可以调用exit()主动终结,也可以异常被动终结,但大部分靠do_exit()来完成do_exit(): 将task_struct标志设为PF_EXITING 调用del_time_sync()删除任一内核定时器。根据返回的结果，它确保没有定时器在排队也没有定时器处理程序在运行。 如果BSD的记账功能是开启的，do_exit()调acct_update_integrals()来输入记账信息。 调用exit_mm()函数释放进程占用的mm_struct，如果没有别的进程使用它们（也就是说，这个进程空间没有被共享），就彻底释放它们。 调用sem_exit()函数，如果进程排队等候IPC信号，它则离开队列。 调用exit_files()和exit_fs()，以分别递减文件描述符、文件系统数据的引用计数。如果其中某个引用计数的数值降为0，那么久代表没有进程在使用相应的资源可以释放。 接着把存放在task_struct和exit_code成员中的任务退出代码置为由exit（）提供的退出代码，或者去完成任何其他由内核机制规定的退出动作，退出代码存放在这里供父进程随时检索。 调用exit_notufy()向父进程发送信号，给子进程重新找养父，养父为线程组中的其他线程或为init进程，并把进程状态（存放在task_struct中的exit_state中）设成EXIT_ZOMBIE。 do_exit()调用schedule（）切换到新的进程。因为处于EXIT_ZOMBIE状态的进程不会再被调度，所以这是进程执行的最后一段代码。do_exit()永不返回。 至此进程仅剩的内存就是内核栈，Thread_info 和task_struct结构。此时进程存在的唯一目的数向它的父进程提供信息。父进程检索到信息后，或者通知内核那是无关信息后，内存释放。 删除进程描述符进程终结时的清理工作和进程描述符的删除被分开进行，这样做可以让系统有办法在子进程终结后仍能获得它的信息。过程如上段。 孤儿进程造成的进退维谷如果父进程在子进程之前退出，必须有机制来保证子进程能够找到一个新的父亲。解决方法是给子进程在当前线程组内找一个线程做父亲，如果不行，就让init做父进程。","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"https://github.com/zdkswd/categories/读书笔记/"}],"tags":[{"name":"纸质书笔记","slug":"纸质书笔记","permalink":"https://github.com/zdkswd/tags/纸质书笔记/"}]},{"title":"[LINUX内核设计与实现]第二章","slug":"从内核出发","date":"2018-04-13T12:36:32.000Z","updated":"2018-04-14T07:49:58.000Z","comments":true,"path":"2018/04/13/从内核出发/","link":"","permalink":"https://github.com/zdkswd/2018/04/13/从内核出发/","excerpt":"","text":"从内核出发内核源码树内核源码树根目录描述 目录 描述 arch 特定体系结构的源码 block 块设备IO层 crypto 加密API Documentation 内核源码文档 drivers 设备驱动程序 firmware 使用某些驱动程序而需要的设备固件 fs VFS和各种文件系统 include 内核头文件 init 内核引导和初始化 ipc 进程间通信代码 kernel 像调度程序这样的核心子系统 lib 通用内核函数 mm 内存管理子系统和VM net 网络子系统 samples 实例，示范代码 scripts 编译内核所用的脚本 security Linux安全模块 sound 语音子系统 usr 早期用户空间代码（所谓的initramfs） tools 在Linux开发中有用的工具 virt 虚拟化基础结构 在源码根目录还有很多文件值得提及。COPYING文件是内核许可证（GNU GPL v2）。CREDITS是开发了很多内核代码的开发者列表。MAINTAINERS是维护者列表，负责维护内核子系统和驱动程序。Makefile是基本内核的Makefile。 编译内核配置内核在编译前可以把自己的需要的特定功能和驱动程序编译进内核，首先必须先配置，其以CONFIG_FEATURE形式表示。配置选项要么是二选一（yes/no）要么是三选一（yes/no/module）module表示这部分功能的实现代码是以模块的形式生成。驱动程序一般都是三选一选项。配置选项也可以是字符串或整数。这些选项并不控制编译过程，而只是指定内核源码可以访问的值，一般以预处理宏的形式表示。 $ make config 该工具会遍历所有配置项，但耗时过长 $make menuconfig$make gconfig 可破之。以上三种工具将所有配置分门别类的放置。 $make defconfig 创建默认配置。这些配置项被存放在根目录的.config文件中。在进行修改后，你应当验证和更新配置： $ make oldconfig 配置选项CONFIG_IKCONFIG_PROC把完整的压缩内核配置文件放在/proc/config.gz下，在编译新内核时可以克隆配置。 $zcat /proc/config.gz &gt; .config$make oldconfig 衍生多个编译作业make程序能把编译过程拆分成多个并行的作业。极大加快编译的过程。 $make -jn 安装新内核 %make modules_install 内核开发的特点 内核编程时既不能访问c库也不能访问标准c头文件。 内核编程时必须使用GNU C 内核编程时缺乏像用户空间那样的内存保护机制。 内核编程时难以执行浮点运算。 内核给每个进程只有一个很小的定长堆栈。 由于内核支持异步中断、抢占和SMP，因此必须时刻注意同步和并发。 要考虑可移植性的重要性。 无libc库或无标准头文件因为对内核来说，C库太大太低效了。但是大部分常用的C库函数在内核中都已经得到了实现。内核头文件位于根目录include目录下。&lt; linux/inotify.h&gt;对应内核include/linux/inotify.h体系结构相关的头文件位于源码树arch/&lt; architecture&gt;/include/asm目录下。内核代码通过如&lt; asm/youwant.h&gt;包含。 printk(“Hello world’%s’and ‘%d’”,str,i); 例如内核代码无法调用printf,但它提供printk()。其允许通过一个标志来设置优先级。 GNU Cgcc是多种GNU编译器的集合，它包含的C编译器既可以编译内核，也可以编译Linux系统上用C语言写的其他代码。 内联函数，用于时间要求高，本身长度短的函数。 定义内联函数时需要static 作为关键字，并且用inline限定它。为了类型安全和易读性，优先使用内联函数而不是复杂的宏。 内联汇编，gcc支持C函数嵌入汇编指令，需要知道其体系结构。使用asm()指令嵌入汇编代码。Linux内核混用了C语言和汇编语言。在偏近体系结构底层或对执行时间要求严格的地方，一般使用汇编语言，其他大部分代码是用C语言编写的。 分支声明，对于条件选择语句，gcc内建了优化指令，并封装成了宏。likely()和unlikely()，你的判断正确，性能会得到提升，如果判断错误，性能反而会下降。 没有内存保护机制在内核中不应该去做访问非法的内存地址，引用空指针一类的事，否则可能一声不响的死掉。内核的内存不分页。 不要轻易在内核中使用浮点数内核并不能完美地支持浮点操作，因为它本身不能陷入。在内核使用浮点数时，除了要人工保存和恢复浮点寄存器，还有一些其他的事情要处理。所以不要在内核中使用浮点操作。 容积小而固定的栈同步和并发可移植性的重要性大部分C代码应该与体系结构无关，在不同体系结构的计算机上都能够编译和执行。如保持字节序、64位对齐、不假定字长和页面长度等一系列准则都有助于移植性。","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"https://github.com/zdkswd/categories/读书笔记/"}],"tags":[{"name":"纸质书笔记","slug":"纸质书笔记","permalink":"https://github.com/zdkswd/tags/纸质书笔记/"}]},{"title":"[LINUX内核设计与实现]第一章","slug":"LINUX内核设","date":"2018-04-13T11:45:41.000Z","updated":"2018-05-16T08:04:23.000Z","comments":true,"path":"2018/04/13/LINUX内核设/","link":"","permalink":"https://github.com/zdkswd/2018/04/13/LINUX内核设/","excerpt":"","text":"第一章主要是讲Linux的历史，而我的第一篇纸质书笔记主要是讲一下我的计划。纸质书做读书笔记的话，任务量会远远大于电子版的图书，所以我争取做到不引用原文，因为那样做任务量过于庞大，这就要求我必须以自己理解的方式概括，这样才能达到预期的效果。之后还会出的纸质书笔记预告：深入理解计算机系统 中英两版。深入理解安卓系统。所以说可以看出直到暑假的这一段时间，我的重点是放在c/c++以及操作系统上，之所以这样做是因为希望未来能够为Tensorflow等开源框架贡献自己的力量。希望大家可以共同学习，共同进步。","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"https://github.com/zdkswd/categories/读书笔记/"}],"tags":[{"name":"纸质书笔记","slug":"纸质书笔记","permalink":"https://github.com/zdkswd/tags/纸质书笔记/"}]},{"title":"[猴子都能懂的Git入门]高级篇","slug":"猴子都能懂的Git入门-高级篇","date":"2018-04-08T03:09:55.000Z","updated":"2018-04-11T07:49:36.000Z","comments":true,"path":"2018/04/08/猴子都能懂的Git入门-高级篇/","link":"","permalink":"https://github.com/zdkswd/2018/04/08/猴子都能懂的Git入门-高级篇/","excerpt":"","text":"分支什么是分支分支是为了将修改记录的整体流程分叉保存。分叉后的分支不受其他分支的影响，所以在同一个数据库里可以同时进行多个修改。 master分支在数据库进行最初的提交后, Git会创建一个名为master的分支。因此之后的提交，在切换分支之前都会添加到master分支里。 分支的运用merge分支Merge分支是为了可以随时发布release而创建的分支，它还能作为Topic分支的源分支使用。保持分支稳定的状态是很重要的。如果要进行更改，通常先创建Topic分支，而针对该分支，可以使用Jenkins之类的CI工具进行自动化编译以及测试。 通常，大家会将master分支当作Merge分支使用。 Topic分支Topic分支是为了开发新功能或修复Bug等任务而建立的分支。若要同时进行多个的任务，请创建多个的Topic分支。 Topic分支是从稳定的Merge分支创建的。完成作业后，要把Topic分支合并回Merge分支。 分支的切换若要切换作业的分支，就要进行checkout操作。进行checkout时，git会从工作树还原向目标分支提交的修改内容。checkout之后的提交记录将被追加到目标分支 HEADHEAD指向的是现在使用中的分支的最后一次更新。通常默认指向master分支的最后一次更新。通过移动HEAD，就可以变更使用的分支。NOTE:提交时使用~(tilde)和^(caret)就可以指定某个提交的相对位置。最常用的就是相对于HEAD的位置。HEAD后面加上~(tilde）可以指定HEAD之前的提交记录。合并分支会有多个根节点，您可以用^(caret) 来指定使用哪个为根节点。 stashstash是临时保存文件修改内容的区域。stash可以暂时保存工作树和索引里还没提交的修改内容，您可以事后再取出暂存的修改，应用到原先的分支或其他的分支上。 分支的合并合并分支有2种方法：使用merge或rebase。使用这2种方法，合并后分支的历史记录会有很大的差别。 merge合并 bugfix分支到master分支时，如果master分支的状态没有被更改过,把master分支的位置移动到bugfix的最新分支上，Git 就会合并。这样的合并被称为fast-forward（快进）合并。HEAD还在原位。master分支的历史记录有可能在bugfix分支分叉出去后有新的更新。这种情况下，要把master分支的修改内容和bugfix分支的修改内容汇合起来。合并两个修改会生成一个提交。这时，master分支的HEAD会移动到该提交上。NOTE:执行合并时，如果设定了non fast-forward选项，即使在能够fast-forward合并的情况下也会生成新的提交并合并。 一个圆圈代表一个提交 rebasetopic分支和merge分支的运用实例分支操作示例建立分支 $ git branch &lt; branchname&gt; 不指定参数直接执行branch命令的话，可以显示分支列表。 前面有*的就是现在的分支。 $ git branch issue1 *master 切换分支执行checkout命令以退出分支。 $ git checkout &lt; branch&gt; NOTE:在checkout命令指定 -b选项执行，可以创建分支并进行切换。 $ git checkout -b &lt; branch&gt; 合并分支执行merge命令以合并分支。 $ git merge &lt; commit&gt; 该命令将指定分支导入到HEAD指定的分支。如当HEAD指向issue1时，先切换到master分支，然后把issue1分支导入到master分支。 $ git checkout master$ git merge issue1 删除分支在branch命令指定-d选项执行，以删除分支。 $ git branch -d &lt; branchname&gt; 用rebase合并切换到issue3分支后，对master执行rebase。 $ git checkout issue3$ git rebase master rebase的时候，修改冲突后的提交不是使用commit命令，而是执行rebase命令指定 –continue选项。若要取消rebase，指定 –abort选项。 $ git add myfile.txt$ git rebase –continue 这样，在master分支的issue3分支就可以fast-forward合并了。切换到master分支后执行合并.看来rebase是将issue3分支消失而生成一个新的提交，就像fast-forward的情形一样。切换到master分支后执行合并。 $ git checkout master$ git merge issue3 上图为rebase图 上图为merge图 Merge和rebase都是合并历史记录，但是各自的特征不同。 merge保持修改内容的历史记录，但是历史记录会很复杂。rebase历史记录简单，是在原有提交的基础上将差异内容反映进去。因此，可能导致原本的提交内容无法正常运行。您可以根据开发团队的需要分别使用merge和rebase。例如，想简化历史记录，在topic分支中更新merge分支的最新代码，请使用rebase。向merge分支导入topic分支的话，先使用rebase，再使用merge。 远端数据库pull首先确认更新的本地数据库分支没有任何的更改。这时只执行fast-forward合并。如果本地数据库的分支有新的历史记录，就需要合并双方的修改。执行pull就可以进行合并。这时，如果没有冲突的修改，就会自动创建合并提交。如果发生冲突的话，要先解决冲突，再手动提交。 fetch执行pull，远程数据库的内容就会自动合并。但是，有时只是想确认本地数据库的内容而不想合并。这种情况下，请使用fetch。执行fetch就可以取得远程数据库的最新历史记录。取得的提交会导入到没有名字的分支，这个分支可以从名为FETCH_HEAD的退出。就相当于在本地数据库建立了一个和远程数据库一样的分支，还没合并。合并后，历史记录会和pull相同。实际上pull的内容是fetch + merge组成的。 push从本地数据库push到远程数据库时，要fast-forward合并push的分支。如果发生冲突，push会被拒绝的。若要共享在本地数据库创建的分支，需要明确的push。因此，没有执行push就不会给远程数据库带来影响，因而可以自由的创建自己的分支。基本上，远程数据库共享的提交是不能修改的。如果修改的话，跟远程数据库同步的其他数据库的历史记录会变得很奇怪的。 标签标签是为了更方便地参考提交而给它标上易懂的名称。Git可以使用2种标签：轻标签和注解标签。打上的标签是固定的，不能像分支那样可以移动位置。轻标签：添加名称注解标签：添加名称 添加注解 添加签名一般情况下，发布标签是采用注解标签来添加注解或签名的。轻标签是为了在本地暂时使用或一次性使用。 使用标签 使用tag命令来添加标签，在&lt; tagname&gt;执行标签的名称。 $ git tag &lt; tagname&gt; 在HEAD指向的提交里添加名为apple的标签，请执行以下的命令。 $ git tag apple 如果没有使用参数而执行tag，可以显示标签列表。 $ git tag 如果在log命令添加 –decorate选项执行，可以显示包含标签资料的历史记录。 $ git log –decorate 添加注解标签若要添加注解标签，可以在tag命令指定 -a选项执行,以指定-m选项来添加注解。 $ git tag -a &lt; tagname&gt; $ git tag -am “连猴子都懂的Git” banana 如果在tag命令指定-n选项执行，可以显示标签的列表和注解。 $ git tag -n 删除标签若要删除标签，在tag命令指定 -d选项执行。 $ git tag -d &lt; tagname&gt; 改写提交修改最近的提交指定amend选项执行提交的话，可以修改同一个分支最近的提交内容和注解。 主要使用的场合：添加最近提交时漏掉的档案修改最近提交的注解 取消过去的提交在revert可以取消指定的提交内容。使用后面要提到的rebase -i或reset也可以删除提交。但是，不能随便删除已经发布的提交，这时需要通过revert创建要否定的提交。 主要使用的场合：安全地取消过去发布的提交 遗弃提交在reset可以遗弃不再使用的提交。执行遗弃时，需要根据影响的范围而指定不同的模式，可以指定是否复原索引或工作树的内容。除了默认的mixed模式，还有soft和hard模式。欲了解受各模式影响的部分，请参照下面的表格。 模式名称 HEAD的位置 索引 工作树 soft 修改 不修改 不修改 mixed 修改 修改 不修改 hard 修改 修改 修改 主要使用的场合： 复原修改过的索引的状态(mixed)彻底取消最近的提交(hard)只取消提交(soft) 提取提交在cherry-pick，您可以从其他分支复制指定的提交，然后导入到现在的分支。 主要使用的场合： 把弄错分支的提交移动到正确的地方把其他分支的提交添加到现在的分支 改写提交历史记录在rebase指定i选项，您可以改写、替换、删除或合并提交。 主要使用的场合： 在push之前，重新输入正确的提交注解清楚地汇合内容含义相同的提交。添加最近提交时漏掉的档案 汇合分支上的提交，然后一同合并到分支merge的特殊选项：squash用这个选项指定分支的合并，就可以把所有汇合的提交添加到分支上。 主要使用的场合： 汇合主题分支的提交，然后合并提交到目标分支。 改写提交训练commit –amend git commit –amend revert $ git revert HEAD 在git log中会出现–Revert “添加pull的说明” reset $ git reset –hard HEAD~~ 在git中，我们其实可以通过^和~来定位某个具体的commit，而不用每次都去敲繁琐的hash值。“^”代表父提交,当一个提交有多个父提交时，可以通过在”^”后面跟上一个数字，表示第几个父提交，”^”相当于”^1”.~&lt; n&gt;相当于连续的&lt; n&gt;个”^”.在reset之前的提交可以参照ORIG_HEAD。Reset错误的时候，在ORIG_HEAD上reset 就可以还原到reset前的状态。 $ git reset –hard ORIG_HEAD cherry-pick $ git checkout master$ git cherry-pick 99daed2 如果发生冲突，修改冲突的部分之后再提交。 用rebase -i 汇合提交若要汇合过去的提交，请用rebase -i。 $ git rebase -i HEAD~~ 两个提交就合并成一个提交了。 用rebase -i 修改提交merge –squash","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"https://github.com/zdkswd/categories/读书笔记/"}],"tags":[{"name":"电子书笔记","slug":"电子书笔记","permalink":"https://github.com/zdkswd/tags/电子书笔记/"}]},{"title":"[猴子都能懂的Git入门]入门篇","slug":"猴子都能懂的Git入门-入门篇","date":"2018-04-06T02:03:47.000Z","updated":"2018-04-09T12:19:46.000Z","comments":true,"path":"2018/04/06/猴子都能懂的Git入门-入门篇/","link":"","permalink":"https://github.com/zdkswd/2018/04/06/猴子都能懂的Git入门-入门篇/","excerpt":"","text":"前言不知道这是第几次学习Git了，每次都是学完过一段就忘了，这次决定自己写出点东西，深入的再把Git再过一遍。写一下自己的东西，真真正正的把Git转化为自己的东西。这次选用的资料是猴子都能懂的Git入门。之所以选用该资料是因为语言比较通俗易懂，而我也正好想把知识总结的通俗易懂一些，算是两重学习。那么话不多说，现在开始吧~~~(写到后面发现这书已经足够通俗，很难再。。。啊，失败。) Git的基础首先git是版本控制工具，用来解决大家对同一文件操作时的协作问题。Git可以在任何时间点，把文档的状态作为更新记录保存起来。因此可以把编辑过的文档复原到以前的状态，也可以显示编辑前后的内容差异。而且，编辑旧文件后，试图覆盖较新的文件的时候（即上传文件到服务器时），系统会发出警告，因此可以避免在无意中覆盖了他人的编辑内容。 管理历史数据的数据库数据库 (Repository) 是记录文件或目录状态的地方，存储着内容修改的历史记录。在数据库的管理下，把文件和目录修改的历史记录放在对应的目录下。 远程数据库和本地数据库。Git的数据库分为远程数据库和本地数据库的两种。 创建数据库创建本地数据库的方法有两种：一种是创建全新的数据库，另一种是复制远程数据库。 修改记录的提交若要把文件或目录的添加和变更保存到数据库，就需要进行提交。执行提交后，数据库中会生成上次提交的状态与当前状态的差异记录（也被称为revision）。Tips:不同类别的修改 (如：Bug修复和功能添加) 要尽量分开提交，以方便以后从历史记录里查找特定的修改内容。执行提交时，系统会要求输入提交信息。请务必输入提交信息，因为在空白的状态下执行提交会失败的。Tips:查看其他人提交的修改内容或自己的历史记录的时候，提交信息是需要用到的重要资料。所以请用心填写修改内容的提交信息，以方便别人理解。以下是Git的标准注解： 第1行：提交修改内容的摘要第2行：空行第3行以后：修改的理由 请以这种格式填写提交信息。 工作树和索引在Git管理下，大家实际操作的目录被称为工作树。 在数据库和工作树之间有索引，索引是为了向数据库提交作准备的区域。 Git在执行提交的时候，不是直接将工作树的状态保存到数据库，而是将设置在中间索引区域的状态保存到数据库。因此，要提交文件，首先需要把文件加入到索引区域中。 凭借中间的索引，可以避免工作树中不必要的文件提交，还可以将文件修改内容的一部分加入索引区域并提交。 教程1 Git基础Git安装略 初期设定安装Git之后，请输入您的用户名和电子邮件地址。该设置操作在安装Git后进行一次就够了。这些信息将作为提交者信息显示在更新历史中。 Git的设定被存放在用户本地目录的.gitconfig档案里。可以直接编辑配置文件。 $ git config –global user.name “&lt;用户名&gt;”$ git config –global user.email “&lt;电子邮件&gt;” $ git config –global color.ui auto //git彩色显示 可以为Git命令设定别名。例如：把「checkout」缩略为「co」，然后就使用「co」来执行命令。 $ git config –global alias.co checkout 如果在Windows使用命令行 (Git Bash), 含非ASCII字符的文件名会显示为 “\\346\\226\\260\\350\\246…”。若设定如下，就可以让含非ASCII字符的文件名正确显示了。 $ git config –global core.quotepath off 若在Windows使用命令行，您只能输入ASCII字符。所以，如果您的提交信息包含非ASCII字符，请不要使用-m选项，而要用外部编辑器输入。 外部编辑器必须能与字符编码UTF-8和换行码LF兼容。 git config –global core.editor “\\”[使用编辑区的路径]\\”” 新建数据库在目录下使用init命令将该目录移动到本地的Git数据库。 $ git init 提交文件对于一个文件，使用status命令确认工作树和索引的状态。 $ git status 将文件加入到索引，要使用add命令。在&lt; file&gt;指定加入索引的文件。用空格分割可以指定多个文件。 $ git add &lt; file&gt;..$ git add . //将所有的文件加入索引 已加入到索引，我们就可以提交文件了。 $ git commit -m “” 使用log命令，我们可以在数据库的提交记录看到新的提交。 $ git log commit ac56e474afbbe1eab9ebce5b3ab48ac4c73ad60eAuthor: eguchi &#x65;&#103;&#117;&#x63;&#104;&#105;&#x40;&#x6e;&#x75;&#x6c;&#x61;&#98;&#x2e;&#x63;&#x6f;&#46;&#x6a;&#x70;Date: Thu Jul 12 18:00:21 2012 +0900first commit 安装git的同时会安装名为gitk的工具。使用这个工具，可以在GUI下确认提交记录。 $ gitk 共享数据库push到远端数据库注意：对于别人的项目你只能 pull 不能 push，只有你自己（或有权限）的项目才能 push。或者说只有你把 ssk key 添加到账号里才能无密码 push。如果你想参与别人的开源项目，先建立自己的 github 账号，然后 fork 那个项目到自己的账号里，然后在自己的项目里修改，然后发出 pull request，然后看对方愿不愿意接受你的提交。 作者：Intopass链接：https://www.zhihu.com/question/29894004/answer/45956664来源：知乎 推送为了将本地数据库的修改记录共享到远程数据库，必须上传本地数据库中存储的修改记录。所以远程数据库的修改记录就会和本地数据库的修改记录保持同步。 克隆远程数据库克隆执行克隆后，远程数据库的全部内容都会被下载。之后您在另一台机器的本地数据库上进行操作。克隆后的本地数据库的变更履历也会被复制，所以可以像原始的数据库一样进行查看记录或其他操作。 从远程服务器Pull若是共享的远程数据库由多人同时作业，那么作业完毕后所有人都要把修改推送到远程数据库。然后，自己的本地数据库也需要更新其他人推送的变更内容。 Pull进行拉取(Pull) 操作，就是从远程数据库下载最近的变更日志，并覆盖自己本地数据库的相关内容。 clone与pull的区别clone是本地没有repository时，将远程repository整个下载过来。 pull是本地有repository时，将远程repository里新的commit数据(如有的话)下载过来，并且与本地代码merge。 对远程服务器进行操作向远程数据库推送本地数据库的修改记录远程数据库命名为“origin”。 请使用remote指令添加远程数据库。在&lt; name&gt;处输入远程数据库名称，在&lt; url&gt;处指定远程数据库的URL。 $ git remote add &lt; name&gt; &lt; url&gt; TIPS:执行推送或者拉取的时候，如果省略了远程数据库的名称，则默认使用名为”origin“的远程数据库。因此一般都会把远程数据库命名为origin。 使用push命令向数据库推送更改内容。&lt; repository&gt;处输入目标地址，&lt; refspec&gt;处指定推送的分支。 $ git push &lt; repository&gt; &lt; refspec&gt;… 当执行命令时，如果您指定了-u选项，那么下一次推送时就可以省略分支名称了。但是，首次运行指令向空的远程数据库推送时，必须指定远程数据库名称和分支名称。 $ git push -u origin master 使用clone指令可以复制数据库，在&lt; repository&gt;指定远程数据库的URL，在&lt; directory&gt;指定新目录的名称。 $ git clone &lt; repository&gt; &lt; directory&gt;$ git clone https://nulab.backlog.jp/git/BLG/tutorial.git tutorial2 当在克隆的数据库目录执行推送时，您可以省略数据库和分支名称。 $ git push 使用pull指令进行拉取操作。省略数据库名称的话，会在名为origin的数据库进行pull。 $ git pull &lt; repository&gt; &lt; refspec&gt;…$ git pull origin master 合并修改记录合并在执行pull之后，进行下一次push之前，如果其他人进行了推送内容到远程数据库的话，那么你的push将被拒绝。这种情况下，在读取别人push的变更并进行合并操作之前，你的push都将被拒绝。这是因为，如果不进行合并就试图覆盖已有的变更记录的话，其他人push的变更（图中的提交C）就会丢失。 合并的时候，Git会自动合并已有的变更点！不过，也存在不能自动合并的情况。此时需要手动合并。 解决冲突如果远程数据库和本地数据库的同一个地方都发生了修改的情况下，因为无法自动判断要选用哪一个修改，所以就会发生冲突。Git会在发生冲突的地方修改文件的内容 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;这就是发生 》 =======冲突的地方 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ==分割线上方是本地数据库的内容,下方是远程数据库的编辑内容。需要手动的修改。 整合修改记录操作为了把变更内容推送到远程数据库，我们必须手动解决冲突。 $ git pull origin master 导入两方的修改，并删除多余的标示行以解决冲突 Github多人协作的三种方式 Fork 方式pull request是一个request，它的目的是让别人pull你的东西。 组织组织的所有者可以针对不同的代码仓库建立不同访问权限的团队。 合作者代码仓库的所有者可以为单个仓库增加具备只读或者读写权限的协作者。","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"https://github.com/zdkswd/categories/读书笔记/"}],"tags":[{"name":"电子书笔记","slug":"电子书笔记","permalink":"https://github.com/zdkswd/tags/电子书笔记/"}]},{"title":"新增评论区功能","slug":"新增评论区功能","date":"2018-04-05T09:49:48.000Z","updated":"2018-04-05T09:58:42.000Z","comments":true,"path":"2018/04/05/新增评论区功能/","link":"","permalink":"https://github.com/zdkswd/2018/04/05/新增评论区功能/","excerpt":"","text":"今天算是折腾了一下评论区，不得不佩服评论区作者的脑洞。运用github issues的机制来自己创建评论区，运用插件—传送门。 在此过程中也算踩了一些坑，特别感谢有人能无私分享自己的踩坑经历–踩坑教程 我自己也顺便试着改了下模板的源码，感觉有、收获。 分享出去，如果可以帮助到更多的人，那将将是更大的快乐。","categories":[],"tags":[{"name":"个人博客","slug":"个人博客","permalink":"https://github.com/zdkswd/tags/个人博客/"}]},{"title":"Hexo+ github Pages建立个人博客","slug":"Hexo+github-Pages建立个人博客","date":"2018-04-04T09:30:56.000Z","updated":"2018-04-04T09:40:30.000Z","comments":true,"path":"2018/04/04/Hexo+github-Pages建立个人博客/","link":"","permalink":"https://github.com/zdkswd/2018/04/04/Hexo+github-Pages建立个人博客/","excerpt":"","text":"折腾了一段时间，还算顺利的把博客给建立好了，以下是参考链接建立过程这个过程大体上是没有问题的，但是我碰到几个小小的问题，大家也可以参考一下 当打开配置文件时，文中说的是用记事本打开，但是我用记事本打开文本完全没有格式，再用写字板打开时，豁然开朗。 再一个就是当上传以后访问自己的首页时,输入https://zdkswd.github.io 死活打不开，我又检查了好几遍，后来直接输入zdkswd.github.io就成功进去了，之后再输入https://zdkswd.github.io 又可以愉快的访问了，感觉特别神奇，也感觉很费解。 第一篇博客就先到这里吧，这一段时间我会上传一些读书笔记，毕竟砖头书不好啃，这既是分享，又是进一步的学习，也是对我自己的一种激励。希望这个博客真正能起到学习，练习，积累，分享的作用。","categories":[],"tags":[{"name":"个人博客","slug":"个人博客","permalink":"https://github.com/zdkswd/tags/个人博客/"}]}]}